(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{543:function(t,s,a){"use strict";a.r(s);var e=a(65),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"语言结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言结构"}},[t._v("#")]),t._v(" 语言结构")]),t._v(" "),a("p",[t._v("JavaScript 的语言结构由词法和语法结构组成。")]),t._v(" "),a("h2",{attrs:{id:"词法结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法结构"}},[t._v("#")]),t._v(" 词法结构")]),t._v(" "),a("p",[t._v("词法结构是语言的最小单元，包括空白符（White Space）、行终止符（Line Terminators）、注释（Comments）和词（Tokens）。")]),t._v(" "),a("h3",{attrs:{id:"格式控制字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式控制字符"}},[t._v("#")]),t._v(" 格式控制字符")]),t._v(" "),a("p",[t._v("Unicode 格式控制字符用于控制源文本的显示，但并不会显示出来。")]),t._v(" "),a("ul",[a("li",[t._v("零宽非连接符（ZERO WIDTH NON-JOINER，ZWNJ）")])]),t._v(" "),a("p",[t._v("用于使用连词的计算机书写系统，例如阿拉伯文字或印度文字和 emoji 等。将其放入两个原本会产生连词的字符之间将不会产生连词效果。Unicode 码点为 U+200C，HTML 实体是 "),a("code",[t._v("&zwnj;")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'👨\\u200C💻'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '👨‌💻' 没有产生连词效果")]),t._v("\n")])])]),a("ul",[a("li",[t._v("零宽连接符（ZERO WIDTH JOINER，ZWJ）")])]),t._v(" "),a("p",[t._v("用于一些复杂文字的计算机排版，例如阿拉伯文字或印度文字和 emoji 等。将其放入两个本来不会连接的字符之间创建一个新的字符。\nUnicode 码点为 U+200D 实体是 "),a("code",[t._v("&zwj;")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'👨\\u200D💻'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '👨‍💻' 产生连词效果")]),t._v("\n")])])]),a("ul",[a("li",[t._v("字节流方向标识符（BYTE ORDER MARK，BOM）")])]),t._v(" "),a("p",[t._v("主要用于文本开头检查文本编码和字节顺序。Unicode 码点为 U+FEFF。")]),t._v(" "),a("p",[t._v("扩展阅读")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903669192720391",target:"_blank",rel:"noopener noreferrer"}},[t._v("零宽度字符：和谐？屏蔽？不存在的"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@umpox/be-careful-what-you-copy-invisibly-inserting-usernames-into-text-with-zero-width-characters-18b4e6f17b66",target:"_blank",rel:"noopener noreferrer"}},[t._v("Be careful what you copy: Invisibly inserting usernames into text with Zero-Width Characters"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"空白符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空白符"}},[t._v("#")]),t._v(" 空白符")]),t._v(" "),a("p",[t._v("空白符用于在不影响源码功能的前提下将 tokens 分隔从而提升源码的可读性。")]),t._v(" "),a("ul",[a("li",[t._v("制表符（CHARACTER TABULATION，TAB）")])]),t._v(" "),a("p",[t._v("电脑上使用 TAB 键可以打印该字符，可以用于将文本排版成类似表格的结构。Unicode 码点为 U+0009，转义序列为 "),a("code",[t._v("\\t")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("垂直制表符（LINE TABULATION，VT）")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+000B，转义序列为 "),a("code",[t._v("\\v")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("分页符（FORM FEED，FF)")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+000C，转义序列为 "),a("code",[t._v("\\f")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("空格（SPACE，SP）")])]),t._v(" "),a("p",[t._v("平常使用的空格。Unicode 码点为 U+0020。")]),t._v(" "),a("ul",[a("li",[t._v("无间断空格（NO-BREAK SPACE，NBSP）")])]),t._v(" "),a("p",[t._v("可以使该空格处的两个字符产生不换行的效果。码点为 U+00A0，HTML 实体为 "),a("code",[t._v("&nbsp;")]),t._v("。例如：")]),t._v(" "),a("div",[t._v("我们可以控制浏览器窗口大小查看后面两个 “Java Script” 文本的效果，这是一段中间没有添加无间断空格 Java Script 文本，这是一段中间添加了无间断空格 Java Script 的文本。")]),t._v(" "),a("p",[t._v("可以看到，没有添加无间断空格的 “Java Script” 文本的 “Java” 和 “Script” 两个字符之间出现了换行效果，而添加了无间断空格的文本两字符之间没有出现换行效果。")]),t._v(" "),a("ul",[a("li",[t._v("其他空白符")])]),t._v(" "),a("h3",{attrs:{id:"行终止符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行终止符"}},[t._v("#")]),t._v(" 行终止符")]),t._v(" "),a("p",[t._v("行终止符用于表示一行文本的结束和新文本的开始，同样可以将 tokens 分隔从而提高源码的可读性，不过行终止符会影响源码的执行，还有自动插入分号规则的执行。")]),t._v(" "),a("ul",[a("li",[t._v("换行符（LINE FEED，LF）")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+000A，转义序列是 "),a("code",[t._v("\\n")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("回车符（CARRIAGE RETURN，CR）")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+000D，转义序列为 "),a("code",[t._v("\\r")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("行分隔符（LINE SEPARATOR，LS）")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+2028。")]),t._v(" "),a("ul",[a("li",[t._v("段分隔符（PARAGRAPH SEPARATOR，PS）")])]),t._v(" "),a("p",[t._v("Unicode 码点为 U+2029。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Windows 操作系统继承了电传打字机使用 CR + LF 作为换行符的传统，而类 Unix 操作系统遵循了 Multics 操作系统单独使用 LF 作为换行符的规定。更多换行符的内容，请点击"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Newline",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),a("p",[t._v("注释可以为源码提供提示信息，增强源码的可读性，还可以屏蔽指定源码，阻止其执行。")]),t._v(" "),a("p",[t._v("注释包括"),a("strong",[t._v("单行注释")]),t._v("和"),a("strong",[t._v("多行注释")]),t._v("两种。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单行注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 一行内的多行注释 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * 多行注释（注释内容的 * 字符不是必须的）\n */")]),t._v("\n")])])]),a("p",[t._v("其中单行注释以 "),a("code",[t._v("//")]),t._v(" 开头，除了行终结符以外的其它源字符都可以作为单行注释的一部分。多行注释以 "),a("code",[t._v("/*")]),t._v(" 开头，以 "),a("code",[t._v("*/")]),t._v(" 结尾，多行注释内容不能嵌套，多行注释可以包含任意源字符，但是 "),a("code",[t._v("*")]),t._v(" 和 "),a("code",[t._v("/")]),t._v(" 不能组合存在于多行注释中，因为 "),a("code",[t._v("*/")]),t._v(" 会被视为多行注释的结束标记。")]),t._v(" "),a("h3",{attrs:{id:"词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词"}},[t._v("#")]),t._v(" 词")]),t._v(" "),a("h4",{attrs:{id:"标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[t._v("#")]),t._v(" 标识符")]),t._v(" "),a("p",[t._v("在计算机科学中，"),a("strong",[t._v("标识符")]),t._v("（Identifier）是命名实体（name entities）的词法标记。而在计算机语言中，标识符则是命名语言实体的词法标记。JavaScript 的语言实体包括变量、属性、函数、类和模块等，而标识符用于命名这些实体。")]),t._v(" "),a("p",[t._v("JavaScript 标识符由第一个字符（Start）和后续字符（Part）两部分构成：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一个字符必须是字母、下划线（_）或者美元符号（$）；")])]),t._v(" "),a("li",[a("p",[t._v("后续字符可以是字母、下划线、美元符号或数字。")])])]),t._v(" "),a("p",[t._v("一般情况下，第一个字符以下划线开头的标识符表示私有属性或全局私有变量；而第一个字符以美元符号开头的标识符常用在框架的 API 命名，这样可以避免框架 API 与用户标识符冲突；而不能以数字作为第一个字符为了避免标识符与整数字面量混淆。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("实际上，JavaSCript 可以使用 Unicode 字符作为标识符，并且后续字符可以包含零宽非连接符和零宽连接符，但不建议使用。")])]),t._v(" "),a("h4",{attrs:{id:"保留字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保留字"}},[t._v("#")]),t._v(" 保留字")]),t._v(" "),a("p",[t._v("在计算机科学中，"),a("strong",[t._v("保留字")]),t._v("（Reserved word）是不能用作标识符的单词，而"),a("strong",[t._v("关键字")]),t._v("（Keyword）是特定上下文具有特殊含义的单词，可以在特定上下文用作标识符，关键字是保留字的子集。")]),t._v(" "),a("p",[t._v("JavaScript 的保留字包括：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" catch "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("false")]),t._v(" finally "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n")])])]),a("p",[a("code",[t._v("yield")]),t._v(" 虽然是保留字，但可以作为标识符使用。")]),t._v(" "),a("p",[a("code",[t._v("enum")]),t._v(" 是未来保留字。"),a("code",[t._v("implements")]),t._v(" "),a("code",[t._v("interface")]),t._v(" "),a("code",[t._v("package")]),t._v(" "),a("code",[t._v("private")]),t._v(" "),a("code",[t._v("protected")]),t._v(" "),a("code",[t._v("public")]),t._v(" 在严格模式下作为未来保留字，用于语言未来扩展新特性。")]),t._v(" "),a("p",[a("code",[t._v("let")]),t._v(" "),a("code",[t._v("static")]),t._v(" 在严格模式下是保留字。")]),t._v(" "),a("p",[a("code",[t._v("arguments")]),t._v(" "),a("code",[t._v("eval")]),t._v(" 虽然即不是保留字也不是关键字，但在严格模式不允许作为标识符使用。")]),t._v(" "),a("p",[a("code",[t._v("undefined")]),t._v(" 虽然既不是保留字也不是关键字，但可以在严格模式中作为变量名使用。")]),t._v(" "),a("p",[t._v("保留字的定义会引发一些问题。JavaScript 由于历史原因，保留字规则非常复杂，对于新手来说，不利于记忆，唯一记忆的办法就是"),a("strong",[t._v("不要使用以上单词作为标识符")]),t._v("；对于语言发展来说，不利于语言新特性的扩展。")]),t._v(" "),a("p",[a("code",[t._v("as")]),t._v(" "),a("code",[t._v("async")]),t._v(" "),a("code",[t._v("from")]),t._v(" "),a("code",[t._v("get")]),t._v(" "),a("code",[t._v("of")]),t._v(" "),a("code",[t._v("set")]),t._v(" "),a("code",[t._v("target")]),t._v(" 是关键字，但不是保留字，可以作为标识符使用。")]),t._v(" "),a("h4",{attrs:{id:"符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号"}},[t._v("#")]),t._v(" 符号")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{ ( ) [ ] . ... ; , < > <= >= == != === !== + - * % ** ++ -- << >> >>> & | ^ ! ~ && || ?? ?. ? : = += -= *= %= **= <<= >>= >>>= &= |= ^= &&= ||= ??= => / /= }\n")])])]),a("p",[t._v("其中，值得注意的是 "),a("code",[t._v("?.")]),t._v(" "),a("code",[t._v("/")]),t._v(" "),a("code",[t._v("/=")]),t._v(" "),a("code",[t._v("}")]),t._v(" 符号。")]),t._v(" "),a("h4",{attrs:{id:"字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),a("p",[a("strong",[t._v("字面量")]),t._v("（Literal）是一种在程序中可以直接使用数据值的符号，也称直接量。")]),t._v(" "),a("h5",{attrs:{id:"空值字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值字面量"}},[t._v("#")]),t._v(" 空值字面量")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n")])])]),a("h5",{attrs:{id:"布尔值字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值字面量"}},[t._v("#")]),t._v(" 布尔值字面量")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("h5",{attrs:{id:"数值字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值字面量"}},[t._v("#")]),t._v(" 数值字面量")]),t._v(" "),a("ul",[a("li",[t._v("十进制数字面量")])]),t._v(" "),a("p",[t._v("整数")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v("\n")])])]),a("p",[t._v("浮点数")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 0.1 (不推荐省略前导零)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926")]),t._v("\n")])])]),a("p",[t._v("以下浮点数将会自动转换为整数：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1 (不推荐省略后置零)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.00")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1")]),t._v("\n")])])]),a("p",[t._v("科学计数法")]),t._v(" "),a("p",[t._v("科学记数法使用 "),a("code",[t._v("E")]),t._v(" 或 "),a("code",[t._v("e")]),t._v(" 后跟可选的 + 或 - 操作符后再跟上整数表示非常大或非常小的数（整数或浮点数），"),a("code",[t._v("E")]),t._v(" 或 "),a("code",[t._v("e")]),t._v(" 后面的整数表示实数值乘以 10 多少次幂。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415E32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415E-32")]),t._v("\n")])])]),a("p",[t._v("ES6 增加了二进制和八进制表示法。")]),t._v(" "),a("ul",[a("li",[t._v("二进制数字面量")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("0b")]),t._v(" 或 "),a("code",[t._v("0B")]),t._v(" 表示二进制数，二进制的数值只包含 0 和 1。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00011000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 24")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0B00011000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 24")]),t._v("\n")])])]),a("ul",[a("li",[t._v("八进制数字面量")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("0o")]),t._v(" 或 "),a("code",[t._v("0O")]),t._v(" 表示八进制数，八进制的数值包括 0 至 7 范围内的整数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o030")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 24")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0O030")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 24")]),t._v("\n")])])]),a("p",[t._v("为了方便区分 0 和 大 O，推荐使用 小 o 表示八进制数。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("在 ES6 以前，可以使用一个前导 0 后面加 0 至 7 组合的整数表示八进制数，而使用上述超出范围的整数表示十进制数，例如 "),a("code",[t._v("030")]),t._v(" 返回的数值是八进制的 24 而不是十进制的 30。但在严格模式中，不允许使用前导零来表示二进制和十进制数，使用前导零会被视为语法错误。")])]),t._v(" "),a("ul",[a("li",[t._v("十六进制数字面量")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("0x")]),t._v(" 或 "),a("code",[t._v("0X")]),t._v(" 表示十六进制数，十六进制的数值包括 0 至 9 以及 A（或 a）至 F（f），A 至 F 表示 10 至 15。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 24")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 31")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 31")]),t._v("\n")])])]),a("ul",[a("li",[t._v("大整数字面量")])]),t._v(" "),a("p",[t._v("可以使用以上进制数加后缀 n 表示大整数，但不能使用浮点数和科学计数法表示大整数，因为这样会导致语法错误。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1234567890n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b11110000n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 240n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o77777777n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 16777215n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xA0B1C2D3n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2696004307n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.24")]),t._v("n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => SyntaxError")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e24")]),t._v("n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => SyntaxError")]),t._v("\n")])])]),a("ul",[a("li",[t._v("数值分隔符")])]),t._v(" "),a("p",[t._v("ECMA2021 新增了数值分隔符，在"),a("strong",[t._v("数值之间")]),t._v("只能使用一个连续的下划线（"),a("code",[t._v("_")]),t._v("）分隔数值可以提高数值字面量的可读性。数值分隔符可以用在以上所有数值字面量数值部分中间，甚至可以用在浮点数小数部分和科学记数法指数部分数值中间，但是数值前后和数值符号前后不能出现数值分隔符，否则会导致语法错误。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good code")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1_234_567_890")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1234567890")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1111_0000")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 240")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o77_777_777")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 16777215")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xA0_B1_C2_D3")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2696004307")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1_415_926")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3.1415926")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.12e1_00")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1.2e+99")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1_000_000_000n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1000000000n")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad code")]),t._v("\n_1234567890\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890")]),t._v("_\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("_b11110000\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("b_11110000\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1415926")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("_1415926\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.12")]),t._v("e_100\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000")]),t._v("_n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("__000\n")])])]),a("h5",{attrs:{id:"字符串字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量"}},[t._v("#")]),t._v(" 字符串字面量")]),t._v(" "),a("p",[t._v("我们可以使用双引号（\"\"）和单引号（''）包括零个、一个或多个 Unicode 字符表示字符串字面量，而且当前引号可以嵌套其他引号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.24'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m front-boy."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name=\"front-boy\"'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("转义序列")])]),t._v(" "),a("p",[t._v("转义序列使用反斜杠（\\）与后面的字符组合，表示在字符串中无法直接使用或输入和拥有其他含义的字符。JavaScript 的转义序列包括字符转义序列、十六进制转义序列和 Unicode 转义序列。")]),t._v(" "),a("p",[t._v("字符转义序列")]),t._v(" "),a("p",[t._v("使用反斜杠后面加上需要转义的字符表示字符转义序列。例如转义换行符、单引号和双引号等字符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the first line.\\nThis is the second line."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I\\'m front-boy.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"She said \\"hi\\", He said."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("十六进制转义序列")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("\\x")]),t._v(" 开头后面加上两位十六进制数表示 0 至 FF 码点内的字符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\xFF'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => ÿ")]),t._v("\n")])])]),a("p",[t._v("Unicode 转义序列")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("\\u")]),t._v(" 开头后面加上四位十六进制数表示 0 至 FFFF 码点内的字符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u2EC1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 虎")]),t._v("\n")])])]),a("p",[t._v("ES6 增加代理对表示 FFFF 至 10FFFF 码点内的字符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\ud83d\\ude32'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 😲")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u{1F632}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 😲")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\ud83d\\ude32'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u{1F632}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("p",[t._v("以下是所有转义序列：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("转义序列")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Unicode")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0000")]),t._v(" "),a("td",[t._v("NUL 字符")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0008")]),t._v(" "),a("td",[t._v("退格符")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0009")]),t._v(" "),a("td",[t._v("制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u000A")]),t._v(" "),a("td",[t._v("换行符")])]),t._v(" "),a("tr",[a("td",[t._v("\\v")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u000B")]),t._v(" "),a("td",[t._v("垂直制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u000C")]),t._v(" "),a("td",[t._v("分页符")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u000D")]),t._v(" "),a("td",[t._v("回车符")])]),t._v(" "),a("tr",[a("td",[t._v('\\"')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0022")]),t._v(" "),a("td",[t._v("双引号")])]),t._v(" "),a("tr",[a("td",[t._v("\\'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0027")]),t._v(" "),a("td",[t._v("单引号")])]),t._v(" "),a("tr",[a("td",[t._v("\\\\")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u005C")]),t._v(" "),a("td",[t._v("反斜杠")])]),t._v(" "),a("tr",[a("td",[t._v("\\xnn")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0000 至 \\u00FF")]),t._v(" "),a("td",[t._v("2 位十六进制")])]),t._v(" "),a("tr",[a("td",[t._v("\\unnnn")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\u0000 至 \\uFFFF")]),t._v(" "),a("td",[t._v("4 位十六进制")])]),t._v(" "),a("tr",[a("td",[t._v("\\u{n}")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("\\uFFFF 至 \\u10FFFF")]),t._v(" "),a("td",[t._v("1 至 6 位十六进制")])])])]),t._v(" "),a("p",[t._v("最后还有一种鲜为人知的八进制转义序列，例如 "),a("code",[t._v("'\\312'")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("模板字面量")])]),t._v(" "),a("p",[t._v("使用反引号（``）表示模板字面量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("template string")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("h5",{attrs:{id:"正则表达式字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式字面量"}},[t._v("#")]),t._v(" 正则表达式字面量")]),t._v(" "),a("p",[t._v("正则表达式字面量由一对斜杠（/）包括的"),a("strong",[t._v("模式")]),t._v("（pattern）和可选的"),a("strong",[t._v("标志")]),t._v("（flags）两个部分构成。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flags\n")])])]),a("p",[a("strong",[t._v("模式")])]),t._v(" "),a("p",[t._v("模式是由普通字符和"),a("strong",[t._v("元字符")]),t._v("（拥有特殊含义的字符）构成的字符串，用于匹配和处理简单或复杂的文本。正则表达式的元字符包括：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \\ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n")])])]),a("p",[t._v("如果需要在模式中使用以上元字符或者具有特殊含义的字符序列，需要使用反斜杠（\\）转义。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("因为 \\b 在正则表达式中有其他含义，所以退格符需要使用 [\\b] 匹配。在正则表达式中，可以使用 \\c 开头的前缀指定"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("控制字符"),a("OutboundLink")],1),t._v("。例如："),a("code",[t._v("\\cH")]),t._v(" 可以匹配退格符。不过这种方式很少见。")])]),t._v(" "),a("p",[t._v("下面将介绍各元字符的含义及使用场景。")]),t._v(" "),a("ul",[a("li",[t._v("单个匹配")])]),t._v(" "),a("p",[t._v("单个匹配可以匹配单个字符或者字符集合中任意一个字符。")]),t._v(" "),a("ol",[a("li",[t._v("匹配任意字符")])]),t._v(" "),a("p",[a("code",[t._v(".")]),t._v(" 字符用于匹配的任意单个字符（行终止符除外）。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("匹配特定字符")])]),t._v(" "),a("p",[a("code",[t._v("[...]")]),t._v(" 字符用于定义一个字符集合，表示匹配该特定字符集合中的任意一个字符。例如，只匹配数字字符等其它特定或者自定义字符集合，那么可以使用 "),a("code",[t._v("/[0123456789]/")]),t._v(" 这种枚举的模式匹配，不过这样表示略显冗余。")]),t._v(" "),a("p",[a("code",[t._v("-")]),t._v(" 字符用于定义一个字符区间，常见的字符区间包括数字字符和字母字符区间，这样，我们就可以使用区间模式匹配特定字符集合。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配小写字母")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Z")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配大写字母")]),t._v("\n")])])]),a("p",[t._v("如果需要在字符集合中包含连字符，只需在字符集合末尾添加该字符即可。例如 "),a("code",[t._v("/[A-Za-z0-9-]/")]),t._v(" 模式可以用于匹配带有字母、数字和连字符。")]),t._v(" "),a("p",[a("code",[t._v("^")]),t._v(" 字符用于定义需要排除的字符集合。例如 "),a("code",[t._v("/[^0-9]/")]),t._v(" 模式可以排除数字字符，匹配非数字字符。")]),t._v(" "),a("p",[t._v("正则表达式还提供了字符类来更为简单的匹配特定类型的字符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符类")]),t._v(" "),a("th",[t._v("匹配字符")]),t._v(" "),a("th",[t._v("字符集合")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("任意一个数字字符")]),t._v(" "),a("td",[t._v("[0-9]")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("任意一个非数字字符")]),t._v(" "),a("td",[t._v("[^0-9]")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("任意一个字母数字或下划线字符")]),t._v(" "),a("td",[t._v("[A-Za-z0-9-]")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("任意一个非字母数字或下划线字符")]),t._v(" "),a("td",[t._v("[^A-Za-z0-9-]")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("任意 Unicode 空白字符")]),t._v(" "),a("td",[t._v("[\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000\\u200a-\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("任意非 Unicode 空白字符")]),t._v(" "),a("td",[t._v("[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000\\u200a-\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])])])]),t._v(" "),a("p",[t._v("为了匹配更多类型的 Unicode 字符，ES2018 新增了 Unicode 字符类，使用 "),a("code",[t._v("\\p{...}")]),t._v(" 和 "),a("code",[t._v("\\P{...}")]),t._v(" 匹配和排除某种 Unicode 字符类型。可以使用以下方式表示 Unicode 字符类：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Unicode 属性名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Unicode 属性值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Unicode 属性名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Unicode 属性值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\p{Number}")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有类型的数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("White_Space"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有 Unicode 空白符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Greek"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配希腊文")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Alphabetic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Decimal_Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Connector_Punctuation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Join_Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有文字字符")]),t._v("\n")])])]),a("p",[t._v("更多 Unicode 字符类请点击"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("重复匹配")])]),t._v(" "),a("p",[t._v("重复匹配可以匹配多个连续重复的字符或字符集合。")]),t._v(" "),a("ol",[a("li",[t._v("贪婪匹配")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("字符或字符集合重复"),a("strong",[t._v("一次或多次")])])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("字符或字符集合重复"),a("strong",[t._v("零次或多次")])])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("字符或字符集合重复"),a("strong",[t._v("零次或一次")]),t._v("，相当于该字符是"),a("strong",[t._v("可选")]),t._v("的")])]),t._v(" "),a("tr",[a("td",[t._v("{n}")]),t._v(" "),a("td",[t._v("字符或字符集合重复 n 次")])]),t._v(" "),a("tr",[a("td",[t._v("{m,n}")]),t._v(" "),a("td",[t._v("字符或字符集合重复至少 m 次，至多 n 次")])]),t._v(" "),a("tr",[a("td",[t._v("{n,}")]),t._v(" "),a("td",[t._v("字符或字符集合重复至少 n 次")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("惰性匹配")])]),t._v(" "),a("p",[t._v("贪婪匹配会尽可能多的匹配文本，如果想要尽可能少的匹配则需要在以上字符后面添加 "),a("code",[t._v("?")]),t._v("，表示惰性匹配文本。例如，"),a("code",[t._v("/a+?/")]),t._v(" 模式表示最多只匹配文本的第一个 a 字符。")]),t._v(" "),a("ul",[a("li",[t._v("位置匹配")])]),t._v(" "),a("p",[t._v("位置匹配可以对文本特定位置进行匹配。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("匹配字符串开始位置")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("匹配字符串结束位置")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("匹配单词边界")])]),t._v(" "),a("tr",[a("td",[t._v("\\B")]),t._v(" "),a("td",[t._v("匹配非单词边界")])])])]),t._v(" "),a("ul",[a("li",[t._v("子表达式")])]),t._v(" "),a("p",[a("code",[t._v("(...)")]),t._v(" 元字符用于表示子表达式。在子表达式中，子表达式可以用于任选、分组和反向引用以及断言。子表达式支持嵌套。")]),t._v(" "),a("ol",[a("li",[t._v("任选")])]),t._v(" "),a("p",[t._v("在子表达式中使用管道符（"),a("code",[t._v("|")]),t._v("）可以将子表达式分为多个选项，并从左到右依次使用这些选项匹配文本，如果匹配到将不会使用剩余的选项匹配。例如，"),a("code",[t._v("/(abc|xyz){3}/")]),t._v(" 模式将匹配 abc 或 xyz 重复 3 次的文本。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("分组和反向引用")])]),t._v(" "),a("p",[t._v("子表达式可以将正则表达式分为多个组，分组将会在匹配文本的同时提供一个捕获分组的引用。如果需要反向引用模式中的分组，可以在模式中使用反斜杠后面紧跟正整数的方式引用分组内容。例如，下面的模式将会引用分组的引号，从而匹配相同的引号：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([\"'`])[^\"'`]*\\1")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])]),a("p",[t._v("如果我们并不需要捕获分组内容，可以使用在子表达式开头添加 "),a("code",[t._v("?:")]),t._v(" 元字符，表示非捕获组。例如，在 "),a("code",[t._v("/(?:a)\\1/")]),t._v(" 模式中，反向引用将捕获不到分组中的内容。")]),t._v(" "),a("p",[t._v("为了更直观引用分组而不是使用数字引用，ES2018 新增了具名捕获组特性，在子表达式开头添加 "),a("code",[t._v("?<...>")]),t._v(" 元字符表示具名捕获组，可以通过 "),a("code",[t._v("\\k<...>")]),t._v(" 元字符反向引用具名捕获组。例如，通过具名捕获组改造引号匹配模式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<quote>[\"'`])[^\"'`]*\\k<quote>")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("断言")])]),t._v(" "),a("p",[t._v("断言用于控制匹配结果返回的文本位置。")]),t._v(" "),a("p",[t._v("向前断言使用 "),a("code",[t._v("x(?=y)")]),t._v(" 表示。匹配 x 后面包含 y 文本并返回 x 的匹配结果。例如，"),a("code",[t._v("/[A-Z][a-zA-Z]+(?=Script)/")]),t._v(" 模式对于 LiveScript 文本，将匹配包含 Script 的文本并返回 Script 文本前的 Live 文本。")]),t._v(" "),a("p",[t._v("向前否定断言使用 "),a("code",[t._v("x(?!y)")]),t._v(" 表示。匹配 x 后面不包含 y 的文本并返回 x 的匹配结果。例如，"),a("code",[t._v("/Java(?!Script)/")]),t._v(" 模式匹配 JavaBeans 文本并返回 Java 文本，但并不匹配包含 Script 的 JavaScript 文本。")]),t._v(" "),a("p",[t._v("ES2018 增加了向后断言特性。")]),t._v(" "),a("p",[t._v("向后断言使用 "),a("code",[t._v("(?<=y)x")]),t._v(" 表示。匹配 x 前面包含 y 文本并返回 x 的匹配结果。例如，"),a("code",[t._v("/(?<=\\$)\\d+/")]),t._v(" 模式匹配包含美元符号的 $123 文本并返回美元符号后面的 123 数值。")]),t._v(" "),a("p",[t._v("向后否定断言使用 "),a("code",[t._v("(?<!y)x")]),t._v(" 表示。匹配 x 前面不包含 y 文本并返回 x 的匹配结果。例如，"),a("code",[t._v("/\\b(?<!\\$)\\d+\\b/")]),t._v(" 模式匹配文本中不包含美元符号的数值。注意，使用 "),a("code",[t._v("\\b")]),t._v(" 单词边界可以避免匹配到拥有美元符号后面的数值字符。")]),t._v(" "),a("p",[a("strong",[t._v("标志")])]),t._v(" "),a("p",[t._v("标志用于控制文本的搜索模式，标志由一个或多个以下字母表示。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("标志")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("g")]),t._v(" "),a("td",[t._v("全局搜索模式")])]),t._v(" "),a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("不区分大小写搜索模式")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("多行搜索模式，适用于多行字符串，^ 和 $ 元字符将匹配每行的开头和结尾")])]),t._v(" "),a("tr",[a("td",[t._v("u")]),t._v(" "),a("td",[t._v("Unicode 搜索模式（ES6），用于精确的匹配码点及 Unicode 字符类")])]),t._v(" "),a("tr",[a("td",[t._v("y")]),t._v(" "),a("td",[t._v("定点搜索模式（ES6)")])]),t._v(" "),a("tr",[a("td",[t._v("s")]),t._v(" "),a("td",[t._v("任意字符搜索模式（ES2018），模式中使用 "),a("code",[t._v(".")]),t._v(" 元字符相当于 [^]")])])])]),t._v(" "),a("h2",{attrs:{id:"语法结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法结构"}},[t._v("#")]),t._v(" 语法结构")]),t._v(" "),a("h3",{attrs:{id:"表达式与操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式与操作符"}},[t._v("#")]),t._v(" 表达式与操作符")]),t._v(" "),a("p",[t._v("表达式用于从左到右计算求值，类似于自然语言中的短语。表达式由至少一个值和可选的操作符构成。")]),t._v(" "),a("p",[t._v("操作符用于组合运算值或操作表达式，从而形成更复杂的表达式。操作符由特殊符号或关键字构成。根据操作符操作值的数量可以将表达式分为一元、二元和三元表达式。")]),t._v(" "),a("p",[t._v("操作符的"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("优先级"),a("OutboundLink")],1),t._v("决定了表达式执行的先后顺序，优先级高的操作符先于优先级低的操作符执行。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 7")]),t._v("\n")])])]),a("p",[t._v("如上所示，乘法操作符的优先级要比加法操作符的优先级高，所以结果为 7。")]),t._v(" "),a("p",[t._v("操作符的结合性控制了相同优先级的表达式执行的顺序。左结合表示从左往右执行操作，右结合表示从右往左执行操作。右结合的操作符包括带括号的 "),a("code",[t._v("new")]),t._v("、指数、一元、赋值和三元操作符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1 相当于 1 ** (2 ** 3)")]),t._v("\n")])])]),a("p",[t._v("操作符的副作用会影响表达式求值的结果，有时我们需要的是操作符的副作用而不是操作符的返回值。自增/减、赋值和 "),a("code",[t._v("delete")]),t._v(" 操作符具有副作用。")]),t._v(" "),a("h4",{attrs:{id:"基本表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本表达式"}},[t._v("#")]),t._v(" 基本表达式")]),t._v(" "),a("p",[t._v("基本表达式是 JavaScript 中最简单的表达式。包括部分关键字、标识符引用、字面量。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键字")]),t._v("\nname "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布尔值字面量")]),t._v("\n")])])]),a("p",[t._v("基本表达式还包括数组字面量、"),a("RouterLink",{attrs:{to:"/front/javascript/object-oriented-programing.html#对象字面量"}},[t._v("对象字面量")]),t._v("和函数表达式。")],1),t._v(" "),a("h5",{attrs:{id:"数组字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组字面量"}},[t._v("#")]),t._v(" 数组字面量")]),t._v(" "),a("p",[t._v("数组字面量是描述初始化数组的表达式，它由方括号包括的以逗号分隔的零个或多个表达式求值构成的"),a("strong",[t._v("元素列表")]),t._v("，元素可以是任意表达式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("ES6 增加了展开语法，从而更简单优雅的将另一个数组的元素浅复制到当前数组。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [1, 2, 3, 4]")]),t._v("\n")])])]),a("p",[t._v("任意位置的元素都可以省略形成数组空洞，最后一个元素被省略将会被忽略。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只包含两个而不是三个元素")]),t._v("\n")])])]),a("p",[t._v("不过由于 ES6 及其之后与 ES6 之前处理数组方法的行为不一致且存在性能隐患，因此在生产中避免使用存在空洞的稀疏数组，而是显示的以 undefined 代替空洞。")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("()")]),t._v(" 分组操作符，可以改变运算符的优先级，在不确定操作符优先级的情况下使用分组操作符可以提高表达式的可读性。")]),t._v(" "),a("h4",{attrs:{id:"左值表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左值表达式"}},[t._v("#")]),t._v(" 左值表达式")]),t._v(" "),a("p",[t._v("左值表达式即可以用于赋值的表达式。包括成员访问表达式、调用表达式和对象创建表达式。")]),t._v(" "),a("h5",{attrs:{id:"成员访问表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成员访问表达式"}},[t._v("#")]),t._v(" 成员访问表达式")]),t._v(" "),a("ol",[a("li",[t._v("对象成员访问")])]),t._v(" "),a("p",[t._v("使用点和方括号表示对象成员访问操作符。使用点访问的属性名必须是合法的标识符，而访问非法标识符的属性名或者计算属性名则需要使用方括号，方括号内的表达式被求值并转换为字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("property\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("父类成员访问")])]),t._v(" "),a("p",[t._v("ES6 启用了用于访问父类成员 "),a("code",[t._v("super")]),t._v(" 关键字。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("property\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("元成员访问")])]),t._v(" "),a("p",[t._v("ES6 增加了 "),a("code",[t._v("new.target")]),t._v(" 属性来判断函数是否被 "),a("code",[t._v("new")]),t._v(" 操作符调用。")]),t._v(" "),a("p",[t._v("ES2020 增加了 "),a("code",[t._v("import.meta")]),t._v(" 属性获取模块的元信息。")]),t._v(" "),a("h5",{attrs:{id:"调用表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用表达式"}},[t._v("#")]),t._v(" 调用表达式")]),t._v(" "),a("p",[t._v("在成员访问表达式后面加上括号包裹的零个参数或使用逗号分隔的参数列表构成了调用表达式。调用表达式包括函数和方法调用，父类成员调用以及 ES2020 增加的动态加载模块。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数调用")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象方法调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象父类调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态导入")]),t._v("\n")])])]),a("h5",{attrs:{id:"对象创建表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象创建表达式"}},[t._v("#")]),t._v(" 对象创建表达式")]),t._v(" "),a("p",[t._v("在成员访问表达式前面加上一个 "),a("code",[t._v("new")]),t._v(" 操作符可以构成对象创建表达式，如果没有参数可以省略括号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"更新表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新表达式"}},[t._v("#")]),t._v(" 更新表达式")]),t._v(" "),a("p",[t._v("使用前缀或后缀自增/减操作符组合操作数构成了更新表达式。前缀自增/减操作符会更新操作数并返回"),a("strong",[t._v("更新后的值")]),t._v("，而后缀自增/减操作符也会更新操作数并返回"),a("strong",[t._v("更新前的值")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前缀自增/减")]),t._v("\nx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等于 x + 1 => x")]),t._v("\nx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等于 x - 1 => x")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后缀自增/减")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等于 x + 1 => x + 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等于 x - 1 => x - 1")]),t._v("\n")])])]),a("h4",{attrs:{id:"算数表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算数表达式"}},[t._v("#")]),t._v(" 算数表达式")]),t._v(" "),a("p",[t._v("算数表达式用于执行算数求值操作。在加、减、乘、除和求余运算的基础上，ES2016 增加了 "),a("code",[t._v("**")]),t._v(" 幂运算符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" b\n")])])]),a("h4",{attrs:{id:"位运算表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算表达式"}},[t._v("#")]),t._v(" 位运算表达式")]),t._v(" "),a("p",[t._v("位运算表达式用于将操作数转换为 32 位的二进制整数，然后对操作数进行按位或移位运算后返回整数。")]),t._v(" "),a("h5",{attrs:{id:"位逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位逻辑运算符"}},[t._v("#")]),t._v(" 位逻辑运算符")]),t._v(" "),a("ol",[a("li",[t._v("按位与")])]),t._v(" "),a("p",[t._v("按位与（"),a("code",[t._v("&")]),t._v("）操作符将两个操作数按位做与运算，也就是两个操作数对应的位"),a("strong",[t._v("都")]),t._v("为 1 时返回 1，否则返回 0。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0010 & 0011 => 0010 => 2")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("按位或")])]),t._v(" "),a("p",[t._v("按位或（"),a("code",[t._v("|")]),t._v("）操作符将两个操作数按位做或运算，也就是两个操作数对应的位"),a("strong",[t._v("有一个")]),t._v("为 1 时返回 1，否则返回 0。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0010 | 0011 => 0011 => 3")]),t._v("\n")])])]),a("p",[a("code",[t._v("|")]),t._v(" 可以用于截取操作数的整数部分。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => -1")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("按位异或")])]),t._v(" "),a("p",[t._v("按位异或（"),a("code",[t._v("^")]),t._v("）操作符将两个操作数按位做异或运算，也就是两个操作数对应的位"),a("strong",[t._v("不同")]),t._v("时返回 1，否则返回 0。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0010 ^ 0011 => 0001 => 1")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("按位非")])]),t._v(" "),a("p",[t._v("按位非（"),a("code",[t._v("~")]),t._v("）操作符是一个一元操作符，将操作数按位进行非运算，返回操作数的补码，也就是将操作数对应的位取反并减 1。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 相当于 -2 - 1 => -(2 + 1) => -3")]),t._v("\n")])])]),a("p",[a("code",[t._v("~~")]),t._v(" 也可以用来截取操作数的整数部分。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => -1")]),t._v("\n")])])]),a("h5",{attrs:{id:"移位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移位运算符"}},[t._v("#")]),t._v(" 移位运算符")]),t._v(" "),a("ol",[a("li",[t._v("左移")])]),t._v(" "),a("p",[t._v("左移（"),a("code",[t._v("<<")]),t._v("）操作符将第一个操作数的所有位"),a("strong",[t._v("向左移动")]),t._v("第二个操作数指定位数，相当于操作数乘以 2"),a("sup",[t._v("n")]),t._v("。左侧移出的位将会被抛弃，右侧空位将用 0 填补。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0010 => 0100 => 4")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("右移")])]),t._v(" "),a("p",[t._v("右移（"),a("code",[t._v(">>")]),t._v("）操作符将第一个操作数的所有位"),a("strong",[t._v("向右移动")]),t._v("第二个操作数指定位数。右侧移出的位将会被抛弃，左侧空位将用最左侧的符号位填补。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10000000 => 00001000 => 8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10000000 => 00001000 => -8")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("无符号右移")])]),t._v(" "),a("p",[t._v("无符号右移（"),a("code",[t._v(">>>")]),t._v("）操作符将第一个操作数的所有位"),a("strong",[t._v("向右移动")]),t._v("第二个操作数指定位数。右侧移出的位将会被抛弃，左侧空位不管符号位是什么都使用 0 填补。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10000000 => 1000 => 8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11111111111111111111111110000000 => 00001111111111111111111111111000 => 268435448")]),t._v("\n")])])]),a("h4",{attrs:{id:"关系表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系表达式"}},[t._v("#")]),t._v(" 关系表达式")]),t._v(" "),a("p",[t._v("关系表达式用于判断两个操作数的关系，并根据关系返回布尔值。")]),t._v(" "),a("h5",{attrs:{id:"比较操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较操作符"}},[t._v("#")]),t._v(" 比较操作符")]),t._v(" "),a("p",[t._v("比较操作符针对数值和字符串做比较操作，如果两个操作数是字符串则比较字符编码顺序。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" b\n")])])]),a("h5",{attrs:{id:"相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[t._v("#")]),t._v(" 相等操作符")]),t._v(" "),a("p",[t._v("宽松相等（"),a("code",[t._v("==")]),t._v("）与严格相等（"),a("code",[t._v("===")]),t._v("）操作符用于判断操作数是否相同；宽松不相等（"),a("code",[t._v("!=")]),t._v("）与严格不相等（"),a("code",[t._v("!==")]),t._v("）操作符用于判断操作数是否不同。")]),t._v(" "),a("p",[t._v("如果操作数的类型相同，"),a("code",[t._v("==")]),t._v(" 与 "),a("code",[t._v("===")]),t._v(" 操作符的行为没有什么区别，否则 "),a("code",[t._v("==")]),t._v(" 操作符需要使用"),a("RouterLink",{attrs:{to:"/front/javascript/type.html#抽象相等比较算法"}},[t._v("抽象相等比较算法")]),t._v("进行隐式强制类型转换，然后再比较。")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" b\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" b\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("在设计 JavaScript 1.0 时，为了满足用户请求，以简化与 HTTP/HTML 的集成，添加了一些有问题的转换规则。"),a("code",[t._v("==")]),t._v(" 和 "),a("code",[t._v("!=")]),t._v(" 操作符被设计成了可以在不同类型操作数之间通过隐式强制类型转换来比较。")]),t._v(" "),a("p",[t._v("在 ES1 发布之前，Brendan Eich 希望将 JavaScript 1.2 中修改了语义并消除强制类型转换问题的 "),a("code",[t._v("==")]),t._v(" 和 "),a("code",[t._v("!=")]),t._v(" 操作符加入到 ES1 中。但被 "),a("strong",[t._v("Don't break the web")]),t._v(" 的理由说服了，最终并没有加入到 ES1 中。")]),t._v(" "),a("p",[t._v("为了弥补 "),a("code",[t._v("==")]),t._v(" 和 "),a("code",[t._v("!=")]),t._v(" 操作符存在强制类型转换的不足，ES3 增加了不允许强制类型转换的 "),a("code",[t._v("===")]),t._v(" 和 "),a("code",[t._v("!==")]),t._v(" 操作符。")])]),t._v(" "),a("h4",{attrs:{id:"逻辑表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑表达式"}},[t._v("#")]),t._v(" 逻辑表达式")]),t._v(" "),a("p",[t._v("逻辑表达式不仅可以针对布尔值进行布尔运算并返回布尔值，还可以用于假值或者空值（null 和 undefined）进行短路运算并返回两个操作数中的其中一个或者 undefined。")]),t._v(" "),a("h5",{attrs:{id:"逻辑非"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[t._v("#")]),t._v(" 逻辑非")]),t._v(" "),a("p",[t._v("逻辑非（"),a("code",[t._v("!")]),t._v("）操作符是一个一元操作符，用于将操作数进行逻辑非运算，也就是该操作符首先会将操作数转换为布尔值，然后在对其取反。如果操作数是布尔值则直接取反；如果操作数是假值则返回 true，如果操作数为真值则返回 false。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a\n")])])]),a("h5",{attrs:{id:"逻辑与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[t._v("#")]),t._v(" 逻辑与")]),t._v(" "),a("p",[t._v("逻辑与（"),a("code",[t._v("&&")]),t._v("）操作符用于将操作数进行逻辑与运算。如果第一个操作数为真值，则返回第二个操作数，否则返回第一个操作数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n")])])]),a("p",[t._v("我们经常使用 "),a("code",[t._v("&&")]),t._v(" 的短路运算机制为成员访问或调用表达式兜底，防止其在求值过程中报错，并且写出更简洁的代码。")]),t._v(" "),a("h5",{attrs:{id:"逻辑或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[t._v("#")]),t._v(" 逻辑或")]),t._v(" "),a("p",[t._v("逻辑或（"),a("code",[t._v("||")]),t._v("）操作符用于将操作数进行逻辑或运算。如果第一个操作数为假值，则返回第二个操作数，否则返回第一个操作数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" b\n")])])]),a("p",[t._v("同样，我们经常使用 "),a("code",[t._v("||")]),t._v(" 的短路运算机制为变量赋值提供默认值。")]),t._v(" "),a("p",[t._v("可以使用德·摩根定律简化逻辑表达式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"空值合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值合并"}},[t._v("#")]),t._v(" 空值合并")]),t._v(" "),a("p",[t._v("ES2020 增加了空值合并（"),a("code",[t._v("??")]),t._v("）操作符，用于给空值提供默认值。如果左侧的操作数是空值，则返回右侧操作数，否则返回左侧操作数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" b\n")])])]),a("p",[t._v("等价于")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a\n")])])]),a("p",[a("code",[t._v("??")]),t._v(" 相当于简化版的 "),a("code",[t._v("||")]),t._v("，前者只有左侧操作数为空值才返回右侧操作数，后者只要左侧为假值就返回右侧操作数。"),a("code",[t._v("??")]),t._v(" 在与 "),a("code",[t._v("&&")]),t._v(" 或 "),a("code",[t._v("||")]),t._v(" 混合使用时存在优先级问题，需要使用括号明确指定谁先执行，否则会抛出语法错误。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" c \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"可选链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选链"}},[t._v("#")]),t._v(" 可选链")]),t._v(" "),a("p",[t._v("ES2020 增加了可选链（"),a("code",[t._v("?.")]),t._v("）操作符，用于可选的访问对象成员或者调用函数。如果左侧操作数是空值，则返回 undefined，否则才会执行对象成员访问或者函数调用操作并返回相应的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在 ES2020 之前，为了避免访问未定义的对象成员而导致的 "),a("code",[t._v("TypeError")]),t._v("，我们通常使用以下方式：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n")])])]),a("p",[t._v("而现在我们只需这样使用：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b\n")])])]),a("p",[t._v("还可以与 "),a("code",[t._v("??")]),t._v(" 搭配使用为空值提供默认值：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" v\n")])])]),a("p",[t._v("值的注意的是，使用括号将会限制 "),a("code",[t._v("?.")]),t._v(" 短路的范围：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n")])])]),a("p",[t._v("以上操作将会导致 "),a("code",[t._v("TypeError")]),t._v("，而去掉括号则返回 undefined。")]),t._v(" "),a("p",[t._v("与对象成员访问和函数调用表达式的区别在于，可选链逻辑表达式不能用于赋值，这会导致 "),a("code",[t._v("SyntaxError")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"条件表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件表达式"}},[t._v("#")]),t._v(" 条件表达式")]),t._v(" "),a("p",[t._v("条件表达式由 "),a("code",[t._v("?:")]),t._v(" 操作符构成，"),a("code",[t._v("?:")]),t._v(" 有三个操作数。如果第一个操作数是假值，则求值第三个操作数并返回其值；否则求值第二个操作数并返回其值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" c\n")])])]),a("h4",{attrs:{id:"赋值表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值表达式"}},[t._v("#")]),t._v(" 赋值表达式")]),t._v(" "),a("p",[t._v("赋值表达式用于将右侧操作数的值赋值给左侧操作数并返回右侧操作数的值。")]),t._v(" "),a("h5",{attrs:{id:"基本赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本赋值"}},[t._v("#")]),t._v(" 基本赋值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n")])])]),a("h5",{attrs:{id:"复合赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复合赋值"}},[t._v("#")]),t._v(" 复合赋值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a + b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a - b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a * b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a / b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a % b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a << b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a >> b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>=")]),t._v(" b  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a >>> b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a & b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a | b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a ^ b")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2017 新增")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a = a ** b")]),t._v("\n")])])]),a("h5",{attrs:{id:"逻辑赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑赋值"}},[t._v("#")]),t._v(" 逻辑赋值")]),t._v(" "),a("p",[t._v("ES2021 新增了 3 个逻辑赋值操作符，这些操作符与上述赋值操作符的区别在于可以利用短路机制避免产生赋值等其他副作用，而且还让代码变得更简洁：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a && (a = b) 而不等价于 a = a && b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a || (a = b) 而不等价于 a = a || b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 a ?? (a = b) 而不等价于 a = a ?? b")]),t._v("\n")])])]),a("h5",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),a("p",[t._v("在 ES6 以前，想要批量提取特定数组的元素和对象的成员需要使用成员访问表达式通过点号或者方括号逐个提取。为了简化这种提取数据的过程，ES6 增加了解构赋值特性，解构赋值经常用于变量赋值和函数参数中。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 以前")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj\n")])])]),a("p",[t._v("右侧的操作数是一个数组或对象，左侧的操作数则是长得像数组或者对象字面量的赋值模式。")]),t._v(" "),a("ol",[a("li",[t._v("数组解构")])]),t._v(" "),a("p",[t._v("数组解构允许我们使用长得像数组字面量的数组模式批量提取数组元素。")]),t._v(" "),a("p",[t._v("数组解构根据元素在数组中的位置进行提取元素，数组模式中的引用对应着数组字面量中的元素。")]),t._v(" "),a("ul",[a("li",[t._v("如果想要元素跳过前面某个元素，则不需要在数组模式中提供引用，而是使用逗号占位；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 2, c => 5")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果想要提取元素后面剩余的所有元素，则可以在数组模式中使用 ES6 提供的剩余元素（必须放在最后）语法；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 2, b => [3, 5]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果提取到了缺失的元素，将会得到 "),a("code",[t._v("undefined")]),t._v("，可以在数组模式中通过等号提供一个默认值。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 2, b => 0")]),t._v("\n")])])]),a("p",[t._v("在 ES6 之前，交换变量值需要使用额外的临时变量，而在 ES6 中，使用数组解构语法可以简化交换变量值操作。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 之前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 2, b => 1")]),t._v("\n")])])]),a("p",[t._v("数组解构不仅可以用于解构数组元素，还可以用于解构可迭代对象的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 1, b => 2")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("对象解构")])]),t._v(" "),a("p",[t._v("对象解构允许我们使用长得像对象字面量的对象模式批量提取属性值。对象模式中的引用对应着对象字面量中的属性名。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 1, b => 2")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果想重命名提取的属性，可以使用冒号提供别名。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c => 1, d => 2")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果提取到缺失的属性，将会得到 "),a("code",[t._v("undefined")]),t._v("，可以在对象模式中使用等号为其提供默认值。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c => undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c => 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果想要提取当前属性后面的所有属性，可以在对象模式中使用 ES2018 提供的剩余属性（必须放在最后）语法。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a => 1, d => { b: 2, c: 3 }")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("当对象解构前面没有变量声明关键字时，必须使用 "),a("code",[t._v("()")]),t._v(" 包括整个赋值表达式，不然左侧的的字面量赋值模式会被视为块，从而导致 "),a("code",[t._v("SyntaxError")]),t._v("。")])]),t._v(" "),a("p",[t._v("无论是数组解构还是对象解构，它们都支持嵌套解构，甚至混合解构，不过一定要适度使用，否则会让代码变得难以理解。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b => 1, d => 2, e => 3")]),t._v("\n")])])]),a("h4",{attrs:{id:"其他操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他操作符"}},[t._v("#")]),t._v(" 其他操作符")]),t._v(" "),a("h5",{attrs:{id:"逗号操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逗号操作符"}},[t._v("#")]),t._v(" 逗号操作符")]),t._v(" "),a("p",[t._v("逗号（"),a("code",[t._v(",")]),t._v("）操作符有两个操作数，首先先求值左侧操作数，然后求值右侧操作数，最后返回右侧操作数的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2")]),t._v("\n")])])]),a("h5",{attrs:{id:"typeof-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-操作符"}},[t._v("#")]),t._v(" typeof 操作符")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 操作符用于检测右侧操作数类型返回表示操作数类型的字符串。")]),t._v(" "),a("h5",{attrs:{id:"delete-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-操作符"}},[t._v("#")]),t._v(" delete 操作符")]),t._v(" "),a("p",[a("code",[t._v("delete")]),t._v(" 操作符用于删除为左值的操作数，如果操作数不是左值，则什么都不做并返回 true；否则删除的是左值，如果删除成功则返回 true，否则返回 false。")]),t._v(" "),a("h5",{attrs:{id:"void-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void-操作符"}},[t._v("#")]),t._v(" void 操作符")]),t._v(" "),a("p",[a("code",[t._v("void")]),t._v(" 操作符用于求值右侧操作数并返回 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"in-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-操作符"}},[t._v("#")]),t._v(" in 操作符")]),t._v(" "),a("p",[a("code",[t._v("in")]),t._v(" 操作符用于判断左侧操作数是不是右侧操作数的属性。如果左侧操作数的值是右侧操作数的属性，则返回 true，否则返回 false。")]),t._v(" "),a("h5",{attrs:{id:"instanceof-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-操作符"}},[t._v("#")]),t._v(" instanceof 操作符")]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v(" 操作符用于判断左侧操作数是不是右侧操作数的实例。如果左侧操作数的值是右侧操作数的实例，则返回 true，否则返回 false。")]),t._v(" "),a("h3",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[t._v("#")]),t._v(" 语句")]),t._v(" "),a("p",[t._v("JavaScript 应用程序由一系列语句组成，而语句是由分号（"),a("code",[t._v(";")]),t._v("）分隔的句子或命令。语句相当于自然语言中的句子。")]),t._v(" "),a("h4",{attrs:{id:"简单语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单语句"}},[t._v("#")]),t._v(" 简单语句")]),t._v(" "),a("h5",{attrs:{id:"空语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空语句"}},[t._v("#")]),t._v(" 空语句")]),t._v(" "),a("p",[t._v("仅使用分号的语句，表示没有语句，常用在分支或者循环语句没有语句体的情况。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(";\n")])])]),a("h5",{attrs:{id:"语句块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句块"}},[t._v("#")]),t._v(" 语句块")]),t._v(" "),a("p",[t._v("使用大括号（"),a("code",[t._v("{}")]),t._v("）组合零个或多个语句的语句块（复合语句），有意思的是，语句块在语法上被视为一个语句，常用在分支语句和循环语句的语句体，也可以单独作为语句块使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  [StatementList]\n}\n")])])]),a("p",[t._v("注意，语句块结尾没有分号。")]),t._v(" "),a("h4",{attrs:{id:"声明语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明语句"}},[t._v("#")]),t._v(" 声明语句")]),t._v(" "),a("p",[t._v("声明语句使用关键字作为前缀，用于将值与标识符名称建立绑定，以方便其它实体（表达式、语句等）引用该值。ES6 以前只有一个使用 var 作为关键字前缀的变量声明语句，不过由于 "),a("code",[t._v("var")]),t._v(" 语句的在运行时比较诡异，所以 ES6 新增了 "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v(" 语句弥补了前者的缺陷。")]),t._v(" "),a("h5",{attrs:{id:"var-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-语句"}},[t._v("#")]),t._v(" "),a("code",[t._v("var")]),t._v(" 语句")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var name1 [= value1] [, name2 [= value2] [, ... nameN [= valueN]]];\n")])])]),a("p",[a("code",[t._v("let")]),t._v(" 语句用于声明变量。其特点如下：")]),t._v(" "),a("ul",[a("li",[t._v("初始化是可选的，如果没有初始化该变量的值将会是 "),a("code",[t._v("undefined")]),t._v("；")]),t._v(" "),a("li",[t._v("允许重复声明同名变量；")]),t._v(" "),a("li",[t._v("允许重新赋值；")]),t._v(" "),a("li",[t._v("在函数外声明的全局变量会成为全局对象的属性。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" userName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" userName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'front-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window.userName === 'front-boy'")]),t._v("\nuserName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'old-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"let-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-语句"}},[t._v("#")]),t._v(" "),a("code",[t._v("let")]),t._v(" 语句")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let name1 [= value1] [, name2 [= value2] [, ... nameN [= valueN]]];\n")])])]),a("p",[a("code",[t._v("let")]),t._v(" 语句用于可变的变量绑定。其特点如下：")]),t._v(" "),a("ul",[a("li",[t._v("初始化也是可选的，如果没有初始化该变量的值将会是 "),a("code",[t._v("undefined")]),t._v("；")]),t._v(" "),a("li",[t._v("不允许重复声明同名变量，否则将会抛出 "),a("code",[t._v("SyntaxError")]),t._v("；")]),t._v(" "),a("li",[t._v("支持重新赋值；")]),t._v(" "),a("li",[t._v("在函数外声明的全局变量"),a("strong",[t._v("不会")]),t._v("成为全局对象的属性。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" userName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" userName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'front-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError")]),t._v("\nuserName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'old-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window.userName === 'undefined'")]),t._v("\n")])])]),a("h5",{attrs:{id:"const-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const-语句"}},[t._v("#")]),t._v(" "),a("code",[t._v("const")]),t._v(" 语句")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const name1 = value1 [, name2 = value2 [, ... nameN = valueN]];\n")])])]),a("p",[a("code",[t._v("const")]),t._v(" 语句用于"),a("strong",[t._v("不可变")]),t._v("的变量绑定。其特点如下：")]),t._v(" "),a("ul",[a("li",[t._v("在声明变量的同时必须初始化变量；")]),t._v(" "),a("li",[t._v("不允许重复声明同名变量，否则将会抛出 "),a("code",[t._v("SyntaxError")]),t._v("；")]),t._v(" "),a("li",[t._v("不允许重新赋值，否则将会抛出 "),a("code",[t._v("TypeError")]),t._v("；")]),t._v(" "),a("li",[t._v("在函数外声明的全局变量"),a("strong",[t._v("不会")]),t._v("成为全局对象的属性。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" userName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => SyntaxError")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" userName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'front-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window.userName === 'undefined'")]),t._v("\nuserName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'old-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError")]),t._v("\n")])])]),a("p",[t._v("声明语句和解构赋值配合使用可以为提取值一次性声明多个变量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" userInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" userName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'front-boy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" userName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"表达式语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式语句"}},[t._v("#")]),t._v(" 表达式语句")]),t._v(" "),a("p",[t._v("表达式作为短语本身就是一种语句，只需在表达式后面加上分号即可。")]),t._v(" "),a("p",[t._v("需要注意的是，在使用无声明的对象结构赋值时，必须使用圆括号包围赋值语句，否则左侧的对象模式会被认为是语句块，从而抛出 "),a("code",[t._v("SyntaxError")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a, b } = { a: 1, b: 2 }; // SyntaxError")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"流程控制语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制语句"}},[t._v("#")]),t._v(" 流程控制语句")]),t._v(" "),a("p",[t._v("流程控制语句简称流控语句，用于产生各种结构和控制语句执行。")]),t._v(" "),a("h5",{attrs:{id:"分支语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支语句"}},[t._v("#")]),t._v(" 分支语句")]),t._v(" "),a("p",[t._v("分支语句会产生分支结构，根据条件选择性的执行或跳过语句。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("if")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("if")]),t._v(" 语句只包含 "),a("code",[t._v("if")]),t._v(" 和可选的 "),a("code",[t._v("else")]),t._v(" 分支子句，并没有 "),a("code",[t._v("else if")]),t._v(" 多分支子句。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if (condition)\n  statement1\n[else \n statement2]\n")])])]),a("p",[t._v("如果条件表达式求值结果为真值，则执行 statement1，否则求值结果为假值，则执行 statement2。statement1 和 statement2 只能是一个语句，可以使用语句块将多条语句组合成一个语句。")]),t._v(" "),a("p",[a("code",[t._v("if")]),t._v(" 和 "),a("code",[t._v("else")]),t._v(" 子句中的语句可以嵌套 "),a("code",[t._v("if")]),t._v(" 语句，所以即使 JavaScript 中没有 "),a("code",[t._v("else if")]),t._v(" 子句，也可以通过在 "),a("code",[t._v("else")]),t._v(" 子句中嵌套 "),a("code",[t._v("if")]),t._v(" 语句形成多分支语句。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其本质其实就是：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("switch")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("switch")]),t._v(" 语句也可以用来表示多分支语句。"),a("code",[t._v("switch")]),t._v(" 语句包含零个或多个 case 子句，还有一个可选的 "),a("code",[t._v("default")]),t._v(" 子句。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("switch (expression) {\n  case expression:\n    statementList\n    [break;]\n  [default: \n    statementList\n    [break;]]\n}\n")])])]),a("p",[a("code",[t._v("switch")]),t._v(" 语句首先会对表达式求值，然后依次匹配与 case 子句表达式的值"),a("strong",[t._v("严格相等")]),t._v("的子句。")]),t._v(" "),a("ul",[a("li",[t._v("如果匹配到则执行对应的语句列表，\n"),a("ul",[a("li",[t._v("如果 "),a("code",[t._v("case")]),t._v(" 子句后面有 "),a("code",[t._v("break")]),t._v(" 语句，则会跳出 "),a("code",[t._v("switch")]),t._v(" 语句，")]),t._v(" "),a("li",[t._v("否则继续执行其他 "),a("code",[t._v("case")]),t._v(" 子句；")])])]),t._v(" "),a("li",[t._v("如果没有匹配case 子句，则会去寻找可选的 "),a("code",[t._v("default")]),t._v(" 子句，\n"),a("ul",[a("li",[t._v("如果找到则执行 "),a("code",[t._v("default")]),t._v(" 子句对应的语句列表，")]),t._v(" "),a("li",[t._v("否则继续执行直到 "),a("code",[t._v("switch")]),t._v(" 语句结束。")])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("需要注意的是，使用 "),a("code",[t._v("switch")]),t._v(" 语句用于多分支语句时，千万不要忘记使用 "),a("code",[t._v("break")]),t._v(" 语句，如果故意为之请加以注释！")])]),t._v(" "),a("h5",{attrs:{id:"循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[t._v("#")]),t._v(" 循环语句")]),t._v(" "),a("p",[t._v("循环语句会产生循环结构，用于执行重复代码。循环语句都有一个称为循环体的语句，如果想在循环体中执行多条语句，可以使用语句块；如果不想执行任何语句，可以使用空语句。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("while")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("while")]),t._v(" 语句以 "),a("code",[t._v("while")]),t._v(" 关键字开头，后面跟着一个使用括号包裹的条件表达式，最后是一个语句。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("while (condition) statement\n")])])]),a("p",[a("code",[t._v("while")]),t._v(" 语句首先会对条件表达式求值：")]),t._v(" "),a("ul",[a("li",[t._v("如果为真值，则会执行循环体，然后继续对条件表达式求值；")]),t._v(" "),a("li",[t._v("如果为假值，则会跳出循环执行后面的语句；")]),t._v(" "),a("li",[t._v("如果始终为真值，该循环则是一个无限循环。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("do-while")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("do-while")]),t._v(" 语句以 "),a("code",[t._v("do")]),t._v(" 关键字开头，后面跟着一个语句，然后使用 "),a("code",[t._v("while")]),t._v(" 关键字，后面跟着一个用括号包裹的条件表达式，最后以分号结尾。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("do statement while (condition);\n")])])]),a("p",[a("code",[t._v("do-while")]),t._v(" 循环的工作方式与 "),a("code",[t._v("while")]),t._v(" 循环类似，只不过它是先执行循环体，然后再对条件表达式求值，也就是"),a("strong",[t._v("至少执行一次")]),t._v("循环体。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("for")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v(" 语句以 "),a("code",[t._v("for")]),t._v(" 关键字开头，然后是被括号包括的初始化表达式、条件表达式和迭代后执行的表达式，它们都是可选的，最后是循环体。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for ([initialization]; [condition]; [final-expression]) statement\n")])])]),a("p",[a("code",[t._v("for")]),t._v(" 语句首先会在循环开始之前定义初始值，然后对条件表达式求值，如果为真值，则执行循环体，最后执行迭代后执行的表达式；如果为假值，则跳出循环执行后面的语句。如果 "),a("code",[t._v("for")]),t._v(" 语句的三个表达式都被省略了，则会创建一个无限循环。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于 "),a("code",[t._v("while")]),t._v(" 循环，"),a("code",[t._v("for")]),t._v(" 循环只是将循环相关的代码封装在了一起而已。而 "),a("code",[t._v("while")]),t._v(" 循环则是这样构建代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("initialization;\nwhile (condition) {\n  statementList\n  final-expression;\n}\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("for-in")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("for-in")]),t._v(" 语句用于迭代对象"),a("strong",[t._v("自身")]),t._v("或者"),a("strong",[t._v("继承")]),t._v("的"),a("strong",[t._v("可枚举")]),t._v("属性，迭代的顺序无序的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for (variable in object) statement\n")])])]),a("p",[a("code",[t._v("for-in")]),t._v(" 语句首先对 object 表达式求值，如果为空值则跳出循环执行后面的语句。否则对 variable 表达式求值，并将属性名赋值给它。最后执行循环体。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[a("code",[t._v("for-in")]),t._v(" 循环不适合用于迭代数组。")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("for-of")]),t._v(" 语句")])]),t._v(" "),a("p",[t._v("为了支持（同步）迭代可迭代对象，ES6 增加了 "),a("code",[t._v("for-of")]),t._v(" 循环。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for (variable of iterable) statement\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[a("code",[t._v("for-await-of")]),t._v(" 语句")])]),t._v(" "),a("p",[t._v("为了支持迭代异步可迭代对象，ES2018 增加了 "),a("code",[t._v("for-await-of")]),t._v(" 循环，它只适用于异步函数。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for await (variable of iterable) statement\n")])])]),a("h5",{attrs:{id:"跳转语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳转语句"}},[t._v("#")]),t._v(" 跳转语句")]),t._v(" "),a("p",[t._v("跳转语句会让语句跳转到特定位置，不过跳转语句受限于上下文环境。")]),t._v(" "),a("ol",[a("li",[t._v("标签语句")])]),t._v(" "),a("p",[t._v("标签语句用于给语句命名，以便 "),a("code",[t._v("break")]),t._v(" 和 "),a("code",[t._v("continue")]),t._v(" 语句引用。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("label: statement\n")])])]),a("p",[t._v("label 可以是任意合法的标识符。标签语句通常应用于嵌套循环。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("break")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("break")]),t._v(" 语句用于提前退出当前循环、"),a("code",[t._v("switch")]),t._v(" 语句和标签语句，使语句跳转至下一个语句执行。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("break [label];\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  inner"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("break")]),t._v(" 语句只能嵌套在上述三种语句中，否则会导致语法错误。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("continue")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("continue")]),t._v(" 语句用于提前退出当前循环并跳转至循环体顶部执行下一轮循环。"),a("code",[t._v("continue")]),t._v(" 语句也可以与带有 label 的循环体配合使用，用于提前退出当前循环并跳转至 label 命名的循环继续执行。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("continue [label];\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("continue")]),t._v(" 语句只能应用于循环体内部，否则会导致语法错误。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("return")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("return")]),t._v(" 语句用于终止函数执行并返回表达式的值，如果省略了表达式则返回 "),a("code",[t._v("undefined")]),t._v("，最终带着值跳转回函数调用方。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("return [expression];\n")])])]),a("p",[a("code",[t._v("return")]),t._v(" 语句只能应用于函数内部，否则会导致语法错误。")]),t._v(" "),a("h5",{attrs:{id:"异常处理语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理语句"}},[t._v("#")]),t._v(" 异常处理语句")]),t._v(" "),a("p",[t._v("程序可能存在一些未知的 bug，异常处理语句可以为我们查找、诊断和修复这些 bug。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("throw")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("throw")]),t._v(" 语句用于抛出自定义异常，表示程序发生了某种意外或者错误。expression 可以是任意类型的值，不过因为 "),a("code",[t._v("Error")]),t._v(" 构造函数提供了沿着函数调用栈传递的异常信息（异常发生的位置和导致失败的函数），所以通常使用 "),a("code",[t._v("Error")]),t._v(" 构造函数作为异常值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("throw expression;\n")])])]),a("p",[a("code",[t._v("throw")]),t._v(" 语句存在一个机制，就是抛出异常会让当前程序停止执行并跳转到最近的异常处理程序继续执行。异常会通过函数调用栈层层传播，直到找到异常处理程序处理该异常，否则异常将会抛出一个未捕获的错误。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("try")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("try")]),t._v(" 语句是 JavaScript 的异常处理程序，用于捕获、处理和退出异常。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("try {\n  statementList\n}\n[catch[(exception)] {\n  statementList\n}]\n[finally {\n  statementList\n}]\n")])])]),a("p",[a("code",[t._v("try")]),t._v(" 语句包含 "),a("code",[t._v("try")]),t._v(" 子句、"),a("code",[t._v("catch")]),t._v(" 子句和 "),a("code",[t._v("finally")]),t._v(" 子句三个部分。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("try")]),t._v(" 子句用于捕获异常")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("catch")]),t._v(" 子句（可选）用于处理异常")])])]),t._v(" "),a("p",[t._v("当 "),a("code",[t._v("try")]),t._v(" 语句捕获到程序执行的错误或者使用 "),a("code",[t._v("throw")]),t._v(" 语句抛出的错误，程序将会跳转到 "),a("code",[t._v("catch")]),t._v(" 子句并执行异常处理相关的代码。其中，接收一个表示异常对象 exception 参数，ES2019 支持省略该参数。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("finally")]),t._v(" 子句（可选）用于清理异常代码并退出异常")])]),t._v(" "),a("p",[t._v("无论 "),a("code",[t._v("try")]),t._v(" 子句或者 "),a("code",[t._v("catch")]),t._v(" 子句发生了什么，只要包含 "),a("code",[t._v("finally")]),t._v(" 子句一定会在上述两种语句执行后执行。")]),t._v(" "),a("p",[t._v("虽然 "),a("code",[t._v("catch")]),t._v(" 子句和 "),a("code",[t._v("finally")]),t._v(" 子句是可选的，不过一定要包含其中一个子句。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("debugger")]),t._v(" 语句")])]),t._v(" "),a("p",[a("code",[t._v("debugger")]),t._v(" 语句用于在开发阶段为程序提供类似于断点的功能，方便在程序出现异常或者错误时调试。")]),t._v(" "),a("h4",{attrs:{id:"自动插入分号机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动插入分号机制"}},[t._v("#")]),t._v(" 自动插入分号机制")]),t._v(" "),a("p",[t._v("自动插入分号机制（Automatic Semicolon Insertion，简称 ASI），是一种推断某些上下文中省略的分号，然后有效地自动将分号插入到程序中的程序解析技术。ASI 让分号作为语句终结符成为了一种可选方案。")]),t._v(" "),a("p",[t._v("ASI 在解析时有一些陷阱，在语法上也有额外的限制，我们只需了解以下规则，就可以享受 ASI 给我们带来的便利。")]),t._v(" "),a("ol",[a("li",[t._v("分号仅在语句块 "),a("code",[t._v("}")]),t._v(" 之前、一行和程序的结尾插入；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("ASI 是一种错误校正的机制，分号仅在输入的标记不能解析时插入；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("由于第一行末尾和第二行开头无法构成合法的标记，程序无法解析这种非法的标记，所以会在第一行末尾插入分号。")]),t._v(" "),a("p",[t._v("不过，下一条语句开始和上一条语句的结束标记能够合法解析，则不会插入分号，主要包括以下 5 种情况：")]),t._v(" "),a("ul",[a("li",[t._v("以 "),a("code",[t._v("(")]),t._v(" 开头被视为调用表达式；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以 "),a("code",[t._v("[")]),t._v(" 开头被视为属性访问表达式；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以 "),a("code",[t._v("`")]),t._v(" 开头被视为标签模板")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以正则表达式字面量开头被视为除法运算符；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以 "),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v("-")]),t._v(" 开头被视为加或减运算符。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" d\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果出现以上几种情况，需要在前面插入分号防御。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("语法限制产生式的地方不能插入换行，即便不会出现解析错误，仍会强制插入分号。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("return")]),t._v(" 关键字与表达式之间不能出现换行；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("throw")]),t._v(" 关键字与表达式之间不能插入换行；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("break")]),t._v(" 或 "),a("code",[t._v("continue")]),t._v(" 关键字与标签之间不能插入换行；")])]),t._v(" "),a("li",[a("p",[t._v("后缀自增自减表达式操作数与操作符之间不能插入换行；")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析前")]),t._v("\na\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nb\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析后")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("yield")]),t._v(" 关键字与表达式之间不能插入换行；")])]),t._v(" "),a("li",[a("p",[t._v("箭头函数参数与胖箭头（"),a("code",[t._v("=>")]),t._v("）之间不能插入换行；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("async")]),t._v(" 关键字与方法或函数之间不能插入换行。")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);