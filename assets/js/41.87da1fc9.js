(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{552:function(t,s,a){"use strict";a.r(s);var e=a(65),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类型系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型系统"}},[t._v("#")]),t._v(" 类型系统")]),t._v(" "),a("p",[t._v("ECMAScript 中的类型用于操作值，每个值都有对应的类型。ECMAScript 类型被进一步细分为语言类型和规范类型。")]),t._v(" "),a("h2",{attrs:{id:"动态类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态类型"}},[t._v("#")]),t._v(" 动态类型")]),t._v(" "),a("p",[t._v("JavaScript 是一种动态类型或者弱类型的语言。变量本身没有与类型进行绑定，而值会在程序运行过程中自动确定类型。")]),t._v(" "),a("h2",{attrs:{id:"语言类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言类型"}},[t._v("#")]),t._v(" 语言类型")]),t._v(" "),a("p",[t._v("ECMAScript 语言类型对应的是程序直接表示和操作的值。包括 "),a("code",[t._v("Undefined")]),t._v("、"),a("code",[t._v("Null")]),t._v("、"),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Symbol")]),t._v("、"),a("code",[t._v("Number")]),t._v("、"),a("code",[t._v("BigInt")]),t._v(" 和 "),a("code",[t._v("Object")]),t._v(" 八大类型。")]),t._v(" "),a("p",[t._v("其中，前七种类型统称为原始类型，其值为原始值，Object 类型称为对象类型，也称引用类型，其值为对象或引用。原始值和对象的区别在于：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原始值")]),t._v(" "),a("ul",[a("li",[t._v("存储在栈内存中；")]),t._v(" "),a("li",[t._v("按值传递。将原始值赋值给变量或者作为参数传递给函数时，通过复制值的方式赋值或传递；")]),t._v(" "),a("li",[t._v("不可变（immutable）。一旦创建就无法修改值本身。")])])]),t._v(" "),a("li",[a("p",[t._v("对象")]),t._v(" "),a("ul",[a("li",[t._v("存储在堆内存中；")]),t._v(" "),a("li",[t._v("按引用传递。将对象赋值给变量或者作为参数传递给函数时，通过复制引用的方式赋值或传递；引用指向存储在堆内存中的对象；")]),t._v(" "),a("li",[t._v("可变（mutable）。默认情况下可以操作对象的属性。")])])])]),t._v(" "),a("h3",{attrs:{id:"undefined-和-null-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-和-null-类型"}},[t._v("#")]),t._v(" Undefined 和 Null 类型")]),t._v(" "),a("p",[t._v("Undefined 类型只有一个值，即 "),a("code",[t._v("undefined")]),t._v("，Null 类型也只有一个值，即 "),a("code",[t._v("null")]),t._v("。它们都用于表示"),a("strong",[t._v("缺少有意义的值")]),t._v("，都是假值或空值，都是各自类型的唯一成员。不过它们存在细微差异。")]),t._v(" "),a("p",[a("code",[t._v("null")]),t._v(" 表示某个预期存在对象值的上下文里"),a("strong",[t._v("没有对象")]),t._v("；"),a("code",[t._v("undefined")]),t._v(" 表示既不是对象也不是原始值。")]),t._v(" "),a("p",[t._v("每当 JavaScript 无法提供具体有效的值时，就会返回 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("变量声明但未初始化值为 "),a("code",[t._v("undefined")]),t._v("；")]),t._v(" "),a("li",[t._v("访问不存在对象属性或者数组元素会返回 "),a("code",[t._v("undefined")]),t._v("；")]),t._v(" "),a("li",[t._v("在函数中，未给函数参数提供实参值为 "),a("code",[t._v("undefined")]),t._v("，使用 "),a("code",[t._v("return")]),t._v(" 语句省略了表达式或者未使用 "),a("code",[t._v("return")]),t._v(" 语句也会返回 "),a("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),a("p",[a("code",[t._v("null")]),t._v(" 是一个关键字，而 "),a("code",[t._v("undefined")]),t._v(" 是一个标识符。")]),t._v(" "),a("h3",{attrs:{id:"boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" Boolean 类型")]),t._v(" "),a("p",[t._v("Boolean 类型用于表示两种可能性的值，即 "),a("code",[t._v("true")]),t._v(" 和 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" String 类型")]),t._v(" "),a("p",[t._v("String 类型（字符串）用于表示文本数据。它是由 16 位 Unicode "),a("strong",[t._v("代码单元")]),t._v("（code unit）组成的字符序列。")]),t._v(" "),a("p",[t._v("Unicode 为全世界所有文字系统的字符提供了一个唯一的整数标识符——"),a("strong",[t._v("代码点")]),t._v("（code point）。Unicode 设计最初版本的时候错误的估算了代码点的容量，认为最多只需 2"),a("sup",[t._v("16")]),t._v(" 个代码点就能表示所有字符，所以使用 16 位代码单元与代码点一对一映射的 USC-2 字符编码来匹配字符。JavaScript 字符串当时也采用了这种方式，每个字符对应一个 16 位代码单元。")]),t._v(" "),a("p",[t._v("不过随着 Unicode 字符规模的扩大，代码点从最初的 2"),a("sup",[t._v("16")]),t._v(" 扩展到超过 2"),a("sup",[t._v("20")]),t._v("。Unicode 将这些代码点划分为 17 个大小为 2"),a("sup",[t._v("16")]),t._v(" 的平面，并从 0 到 16 编号，总共包含 1114112 个代码点。第 0 平面称为基本多文种平面（Basic Multilingual Plane，简称 BMP），包含最初的 2"),a("sup",[t._v("16")]),t._v(" 个代码点，剩下的 16 个平面统称为辅助平面（Supplementary Planes）。在 BMP 中，从 U+D800 到 U+DFFF 之间的码位区段永久保留且不映射任何 Unicode 字符。")]),t._v(" "),a("p",[t._v("随着代码点的扩展，USC-2 已经不再适用。而作为 USC-2 的替代者，"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/UTF-16",target:"_blank",rel:"noopener noreferrer"}},[t._v("UTF-16"),a("OutboundLink")],1),t._v(" 采用"),a("strong",[t._v("代理对")]),t._v("（Surrogate Pair）来表示扩展的代码点，用两个 16 位代码单元表示一个扩展的代码点。代理对的具体实现方式是：")]),t._v(" "),a("ol",[a("li",[t._v("代码点减去 "),a("code",[t._v("0x10000")]),t._v("，得到一个 20 位的字符集；")]),t._v(" "),a("li",[t._v("将高位与 "),a("code",[t._v("0xD800")]),t._v(" 相加得到第一个代码单元；")]),t._v(" "),a("li",[t._v("将低位与 "),a("code",[t._v("0xDC00")]),t._v(" 相加得到第二个代码单元；")]),t._v(" "),a("li",[t._v("将第一个代码单元与第二个代码单元组合得到一个代理对。")])]),t._v(" "),a("p",[t._v("以 U+1F4A9（💩）为例：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("0x1F4A9")]),t._v(" 减去 "),a("code",[t._v("0x10000")]),t._v(" 得到 "),a("code",[t._v("0xF4A9")]),t._v("，二进制为 "),a("code",[t._v("0000111101 0010101001")]),t._v("；")]),t._v(" "),a("li",[t._v("将高位（前十位）"),a("code",[t._v("0x03D")]),t._v("（"),a("code",[t._v("0000111101")]),t._v("）与 "),a("code",[t._v("0xD800")]),t._v(" 相加得到 "),a("code",[t._v("0xD83D")]),t._v("；")]),t._v(" "),a("li",[t._v("将低位（后十位）"),a("code",[t._v("0x0A9")]),t._v("（"),a("code",[t._v("0010101001")]),t._v("）与 "),a("code",[t._v("0xDC00")]),t._v(" 相加得到 "),a("code",[t._v("0xDCA9")]),t._v("；")]),t._v(" "),a("li",[t._v("将 "),a("code",[t._v("0xD83D")]),t._v(" 与 "),a("code",[t._v("0xDCA9")]),t._v(" 组合即可得到代理对。")])]),t._v(" "),a("p",[t._v("为了表示更多的字符，JavaScript 也支持了 UTF-16 编码，所以在 JavaScript 字符串中同时支持了 UCS-2 和 UTF-8 两种字符编码。不过当 Unicode 字符规模扩大时，JavaScript 字符串的字符元素已经采用了 16 位表示，而字符串的 "),a("code",[t._v("length")]),t._v(" 属性、"),a("code",[t._v("charAt()")]),t._v("、"),a("code",[t._v("charCodeAt()")]),t._v(" 和 "),a("code",[t._v("fromCharCode()")]),t._v(" 方法都已基于代码单元实现，这也导致这些属性和方法处理辅助平面的字符时无法正常工作，需要引入新的 API 才能更好地处理辅助平面字符。")]),t._v(" "),a("h4",{attrs:{id:"创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),a("p",[t._v("我们可以通过"),a("RouterLink",{attrs:{to:"/front/javascript/structure.html#字符串字面量"}},[t._v("字面量")]),t._v("来创建 String 类型的值。")],1),t._v(" "),a("h4",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("p",[t._v("字符串有一个 "),a("code",[t._v("length")]),t._v(" 属性，用于表示字符串中字符代码单元的数量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wow 😲!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 7")]),t._v("\n")])])]),a("p",[t._v("😲 表情符号需要使用两个代码单元表示，所以上述字符串的长度是 7 而不是我们实际看到的 6。")]),t._v(" "),a("h4",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("字符串的方法用于字符、搜索、提取、组合、转换、模式匹配和比较操作。")]),t._v(" "),a("h5",{attrs:{id:"字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),a("ul",[a("li",[t._v("charAt(pos)")])]),t._v(" "),a("p",[t._v("用于返回给定索引位置的字符。JavaScript 字符串也支持通过属性访问表达式（"),a("code",[t._v("[]")]),t._v("）根据索引访问指定位置字符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => l")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => l")]),t._v("\n")])])]),a("ul",[a("li",[t._v("charCodeAt(index)")])]),t._v(" "),a("p",[t._v("用于返回 BMP 范围内指定代码单元索引的代码点。")]),t._v(" "),a("ul",[a("li",[t._v("codePointAt(pos)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于返回辅助平面范围内指定代码单元索引位置的代码点。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'😲'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 55357")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 56882")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 128562")]),t._v("\n")])])]),a("ul",[a("li",[t._v("String.fromCharCode(codes)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于根据 BMP 范围内的代码点序列创建字符串。")]),t._v(" "),a("ul",[a("li",[t._v("String.fromCodePoint(codePoints)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于根据辅助平面范围内的代码点序列创建字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromCharCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("55357")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("56882")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '😲'")]),t._v("\nString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromCodePoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128562")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '😲'")]),t._v("\n")])])]),a("h5",{attrs:{id:"搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索"}},[t._v("#")]),t._v(" 搜索")]),t._v(" "),a("ul",[a("li",[t._v("indexOf(searchString, ?position) & lastIndexOf(searchString, ?position)")])]),t._v(" "),a("p",[t._v("用于从主串开头或者末尾开始搜索子字符串并返回子字符串在主串第一次出现的位置，没有搜索到则返回 "),a("code",[t._v("-1")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("includes(searchString, ?position)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于判断主串是否存在子字符串并返回布尔值。")]),t._v(" "),a("ul",[a("li",[t._v("startsWith(searchString, ?position)"),a("sup",[t._v("(ES6)")]),t._v(" & endsWith(searchString, ?position)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于判断主串开头或者结尾是否存在子字符串并返回布尔值。")]),t._v(" "),a("p",[t._v("searchString 是搜索的子字符串，可选的 position 是搜索的位置，可以用它来缩减搜索的范围。")]),t._v(" "),a("h5",{attrs:{id:"提取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取"}},[t._v("#")]),t._v(" 提取")]),t._v(" "),a("ul",[a("li",[t._v("slice(?start, ?end)")])]),t._v(" "),a("p",[t._v("用于从字符串中提取新的子字符串。start 表示提取的开始位置，end 表示提取的结束位置（不包含），它们都是可选的。如果索引为负数，则索引为字符串长度加负数索引。如果两个参数都不传相当于复制整个字符串。")]),t._v(" "),a("ul",[a("li",[t._v("substring(start, ?end)")])]),t._v(" "),a("p",[t._v("用于提取开始索引和可选结束索引（不包含）之间的子字符串并返回新的子字符串。")]),t._v(" "),a("ul",[a("li",[t._v("at(index)"),a("sup",[t._v("(ES2022)")])])]),t._v(" "),a("p",[t._v("用于返回索引位置的字符。如果 index 为负数，则返回字符串最后一个元素开始倒数第 index 个位置上的字符。")]),t._v(" "),a("p",[t._v("在 ES2022 以前，想要获取字符串倒数第几位元素上的字符，需要使用 "),a("code",[t._v("str[str.length - index]")]),t._v(" 或者 "),a("code",[t._v("slice()")]),t._v(" 方法才能做到，有了 "),a("code",[t._v("at()")]),t._v(" 方法后可以让这种操作变得更加简单。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => l")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => l")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("at")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => l")]),t._v("\n")])])]),a("h5",{attrs:{id:"组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合")]),t._v(" "),a("ul",[a("li",[t._v("concat(strings)")])]),t._v(" "),a("p",[t._v("用于将一个或多个字符串拼接成一个新的字符串。不过使用加号操作符（"),a("code",[t._v("+")]),t._v("）拼接字符串效果更好。")]),t._v(" "),a("ul",[a("li",[t._v("repeat(count)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于将字符串重复 count 次并返回重复后的新字符串。如果填充次数为 0，则返回空字符串。")]),t._v(" "),a("ul",[a("li",[t._v("padStart(maxLength, ?fillString)"),a("sup",[t._v("(ES2017)")]),t._v(" & padEnd(maxLength, ?fillString)`"),a("sup",[t._v("(ES2017)")])])]),t._v(" "),a("p",[t._v("用于将可选的填充字符串填充到当前字符串的开头或结尾直到达到最大长度，并返回填充后的新字符串。如果省略了填充字符串，则默认填充空格（U+0020）。如果最大长度小于或等于字符串长度，则返回原始字符串。")]),t._v(" "),a("ul",[a("li",[t._v("trim()")])]),t._v(" "),a("p",[t._v("用于删除字符串左右两边的空白符和行终止符并返回删除后的新字符串。")]),t._v(" "),a("ul",[a("li",[t._v("trimStart()"),a("sup",[t._v("(ES2019)")]),t._v(" & trimEnd()"),a("sup",[t._v("(ES2019)")])])]),t._v(" "),a("p",[t._v("用于删除字符串开头或末尾的空白符和行终止符并返回删除后的新字符串。")]),t._v(" "),a("h5",{attrs:{id:"转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换"}},[t._v("#")]),t._v(" 转换")]),t._v(" "),a("ul",[a("li",[t._v("normalize(?form)"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于将看起来相同，但代码点不同的字符按照某种形式规范化并返回规范化后的字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Å'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Å'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Å'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Å'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("normalize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("p",[t._v("因为第一个字符是一个 BMP 范围内的字符，其 Unicode 转义序列为 "),a("code",[t._v("'\\u00C5'")]),t._v("，而第二个字符是一个辅助平面范围内的字符，其 Unicode 转义序列为 "),a("code",[t._v("'\\u0041\\u030A'")]),t._v("，所以它们不相等，不过规范化第二个字符后它们相等了。")]),t._v(" "),a("ul",[a("li",[t._v("toLowerCase() & toUpperCase()")])]),t._v(" "),a("p",[t._v("用于转换字符串中 Unicode 字母大小写并返回转换后的新字符串。")]),t._v(" "),a("ul",[a("li",[t._v("toLocaleLowerCase() & toLocaleUpperCase()")])]),t._v(" "),a("p",[t._v("用于根据特定地区语言的特殊规则转换字符串中 Unicode 字母大小写并返回转换后的新字符串。")]),t._v(" "),a("ul",[a("li",[t._v("String.raw()"),a("sup",[t._v("(ES6)")])])]),t._v(" "),a("p",[t._v("用于获取模板字符串中的原始字符串。使用该方法模板字符串中的转义序列将不会被转义。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raw"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("first line\\nsecond line")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'first line\\nsecond line'")]),t._v("\n")])])]),a("h5",{attrs:{id:"模式匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[t._v("#")]),t._v(" 模式匹配")]),t._v(" "),a("ul",[a("li",[t._v("match(regExp)")])]),t._v(" "),a("p",[t._v("用于检索并返回字符串与正则表达式匹配的结果。如果 regExp 使用了 "),a("code",[t._v("g")]),t._v(" 标志，则返回匹配的所有结果；如果未使用 "),a("code",[t._v("g")]),t._v(" 标志，则返回第一个匹配的结果及相关捕获组；如果没有匹配项，则返回 "),a("code",[t._v("null")]),t._v("；如果 regExp 是非正则表达式，则会使用 "),a("code",[t._v("new RegExp")]),t._v(" 隐式的创建一个正则表达式。")]),t._v(" "),a("ul",[a("li",[t._v("matchAll(regExp)"),a("sup",[t._v("(ES2020)")])])]),t._v(" "),a("p",[t._v("用于检索并返回字符串与正则表达式匹配的所有结果及其捕获组的迭代器。regExp 必须包含 "),a("code",[t._v("g")]),t._v(" 标志，否则会抛出 "),a("code",[t._v("TypeError")]),t._v("。在 ES2020 以前，需要使用 "),a("code",[t._v("while")]),t._v(" 循环加正则表达式的 "),a("code",[t._v("exec()")]),t._v(" 方法才能同时获取匹配项和捕获组。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2020 以前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("t(e)(st(\\d?))")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test1test2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" matches "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lastIndexes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlastIndexes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlastIndexes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tmatches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2020")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("search(regExp)")])]),t._v(" "),a("p",[t._v("用于返回字符串与正则表达式第一个匹配结果的索引，如果没有匹配项则返回 "),a("code",[t._v("-1")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("replace(searchValue, replacement)")])]),t._v(" "),a("p",[t._v("用于字符串替换并返回替换后的新字符串。searchValue 可以是一个字符串或者一个正则表达式，replacement 可以是一个字符串或者函数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htmlEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('[<>"&]')]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&gt;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&quot;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&amp;'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htmlEscape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<div class=\"container\"></div>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => '&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;'")]),t._v("\n")])])]),a("p",[t._v("以上代码用于将 HTML 标签中的特殊字符转义为 HTML 实体。")]),t._v(" "),a("ul",[a("li",[t._v("replaceAll(searchValue, replacement)"),a("sup",[t._v("(ES2021)")])])]),t._v(" "),a("p",[t._v("用于全局匹配替换字符串并返回替换后的字符串。searchValue 可以是字符串或者正则表达式，如果 searchValue 是正则表达式，必须包含 "),a("code",[t._v("g")]),t._v(" 标志，否则会抛出 "),a("code",[t._v("TypeError")]),t._v("。replacement 可以是一个字符串或者函数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2021 以前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" queryString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'q=query+string+parameters'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nqueryString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'q=query string parameters'")]),t._v("\nqueryString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'q=query string parameters'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2021")]),t._v("\nqueryString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'q=query string parameters'")]),t._v("\n")])])]),a("p",[t._v("在 ES2021 以前，在匹配并替换多个相同的字符串时，需要使用 "),a("code",[t._v("replace()")]),t._v(" 方法并使用正则表达式全局匹配，或者使用 "),a("code",[t._v("split()")]),t._v(" 和数组的 "),a("code",[t._v("join()")]),t._v(" 方法才能做到这一点。而使用 ES2021 的 "),a("code",[t._v("replaceAll()")]),t._v(" 方法会变得更加直观方便。")]),t._v(" "),a("ul",[a("li",[t._v("split(separator, limit)")])]),t._v(" "),a("p",[t._v("用于根据 separator 将字符串拆分为由子字符串构成的数组。separator 可以是字符串或者正则表达式。limit 用于限制返回的数组元素。")]),t._v(" "),a("h5",{attrs:{id:"比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),a("ul",[a("li",[t._v("localeCompare(compareString, ?locales, ?options)")])]),t._v(" "),a("p",[t._v("用于根据本地区实现比较字符串并返回一个数字。如果当前字符串小于比较字符串，则返回负数，如果当前字符串大于比较字符串，则返回正数，否则返回 "),a("code",[t._v("0")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"模板字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串"}},[t._v("#")]),t._v(" 模板字符串")]),t._v(" "),a("p",[t._v("为了增强字符串的能力，同时提供对模板的支持并降低注入等安全风险，ES6 新增了模板字符串，使用反引号（``）标识，需要使用转义才能在模板字符串中使用反引号。")]),t._v(" "),a("h5",{attrs:{id:"多行字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多行字符串"}},[t._v("#")]),t._v(" 多行字符串")]),t._v(" "),a("p",[t._v("在 ES6 之前，JavaScript 的字符串一定要在一行才行。如果想要软换行字符串，也就是看起来是多行其实是一行的字符串，那需要在每行字符串末尾增加一个反斜杠。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is actually \\\na line.'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => This is actually a line.")]),t._v("\n")])])]),a("p",[t._v("如果想要硬换行，也就是真正意义上的将一行字符串转换为多行字符串，那就需要在换行字符串前使用转义的换行符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is the first line.\\nThis is the second line.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("而在 ES6 的模板字面量中默认支持多行字符串，模板字面量会保留换行符空白符等符号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("This is the first line.\nThis is the second line.")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"字符串插值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串插值"}},[t._v("#")]),t._v(" 字符串插值")]),t._v(" "),a("p",[t._v("在 ES6 之前，如果需要给字符串插值，我们需要使用字符串拼接的形式才能做到。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sum = '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => sum = 3")]),t._v("\n")])])]),a("p",[t._v("现在我们可以在 "),a("code",[t._v("${")]),t._v(" 和 "),a("code",[t._v("}")]),t._v(" 占位符之间插入任意的 JavaScript 表达式。表达式会将值立即求出，然后转换为字符串，最终替换占位符并与其他字符串拼接形成新的字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("sum = ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => sum = 3")]),t._v("\n")])])]),a("p",[t._v("模板字符串支持嵌套插值。")]),t._v(" "),a("h5",{attrs:{id:"标签函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签函数"}},[t._v("#")]),t._v(" 标签函数")]),t._v(" "),a("p",[t._v("无论是使用普通字符串还是模板字符串进行插值都存在注入等安全风险，不过我们可以使用模板函数对模板字符串的值进行预处理来尽可能的规避风险，也就是对某些字符进行转义、过滤等自定义操作并返回处理好的字符串。")]),t._v(" "),a("p",[t._v("模板字符串前面的标识符作为函数名，"),a("code",[t._v("${}")]),t._v(" 占位符将字符串拆分为多段并组合到数组中作为函数的第一个参数，占位符内的值作为函数的剩余参数，标签函数的第一个参数包括一个 "),a("code",[t._v("raw")]),t._v(" 属性，我们通过它可以获取未经处理的原始字符串。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => ['a', 'b', 'c', ''] 1 2 3")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => a\\n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ntag"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("a\\n")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("p",[t._v("为了能够在标签函数中正常嵌套其他模板语言，ES2018 在标签函数中放宽了对非法转义序列的语法限制，非法转义序列在标签函数中将返回 "),a("code",[t._v("undefined")]),t._v(" 而不再是抛出语法错误，不过在其他字符串中并未解除该限制。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined '\\\\unicode'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlatex"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\unicode")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\\unicode")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => SyntaxError: Invalid Unicode escape sequence")]),t._v("\n")])])]),a("h3",{attrs:{id:"symbol-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[t._v("#")]),t._v(" Symbol 类型")]),t._v(" "),a("p",[t._v("Symbol 类型是 ES6 新增的数据类型，用于为对象的属性名创建一个唯一的、非字符串形式的标识符，这样能够避免对象属性名冲突。Symbol 类型还可以用于定义语言内部行为。")]),t._v(" "),a("p",[t._v("我们可以使用 "),a("code",[t._v("Symbol()")]),t._v(" 函数创建 Symbol 类型的值。为了方便阅读与调试，可以为函数传入一个可选的字符串参数作为 symbol 值的描述。")]),t._v(" "),a("h4",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("p",[t._v("为了方便读取描述，ES2019 增加了 "),a("code",[t._v("description")]),t._v(" 属性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mySymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmySymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("description "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'foo'")]),t._v("\n")])])]),a("h4",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[t._v("for(key)")])]),t._v(" "),a("p",[t._v("有时候，我们需要在不同执行上下文共享和复用 symbol 值，那么可以通过 "),a("code",[t._v("Symbol.for(key)")]),t._v(" 方法并传入字符串参数 key 在全局注册表中创建或者查找 symbol。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createGlobalSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reuseGlobalSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncreateGlobalSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" reuseGlobalSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("keyFor(symbol)")])]),t._v(" "),a("p",[a("code",[t._v("Symbol.keyFor(symbol)")]),t._v(" 方法用于返回在全局注册表中与 symbol 关联的 key。如果查找的 symbol 值不在全局符号表中，则返回 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" globalSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("globalSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'foo'")]),t._v("\n")])])]),a("h3",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" Number 类型")]),t._v(" "),a("p",[t._v("Number 类型是一种基于 IEEE 754 标准的 64 位"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Double-precision_floating-point_format",target:"_blank",rel:"noopener noreferrer"}},[t._v("双精度浮点数"),a("OutboundLink")],1),a("strong",[t._v("数值类型")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/a/a9/IEEE_754_Double_Floating_Point_Format.svg",alt:"双精度浮点数"}})]),t._v(" "),a("p",[t._v("双精度浮点数格式由 1 位符号位（sign）、11 位指数位（exponent）和 53 位有效位（fraction）构成。符号位在最高位中，0 表示正数，1 表示负数；指数位用于表示小数点的位置，也可以用于表示 NaN、Infinity 和非规范化浮点数；有效位用于表示一定范围内的小数，并且有效位的最高位存在一个彩蛋位，该位始终为 1。")]),t._v(" "),a("blockquote",[a("p",[t._v("数值 = 符号位 * 有效位 * 2 ** 指数")])]),t._v(" "),a("p",[t._v("Number 类型可以用来表示整数和浮点数值。在表示整数时，它的精度高达 53 位；但在表示浮点数时，浮点数在精度与性能之间做了权衡，有一些实数在 64 位存储空间中无法表示，为了保证性能，只能四舍五入到最接近的实数表示，这样那些无法表示的实数就会存在精度丢失，这也导致 0.1 + 0.2 !== 0.3。")]),t._v(" "),a("h4",{attrs:{id:"创建-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-2"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),a("p",[t._v("我们可以通过"),a("RouterLink",{attrs:{to:"/front/javascript/structure.html#数值字面量"}},[t._v("字面量")]),t._v("来创建 Number 类型的值。")],1),t._v(" "),a("h4",{attrs:{id:"特殊数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊数值"}},[t._v("#")]),t._v(" 特殊数值")]),t._v(" "),a("h5",{attrs:{id:"零"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零"}},[t._v("#")]),t._v(" 零")]),t._v(" "),a("p",[t._v("JavaScript 基于 IEEE 754 标准实现了 "),a("code",[t._v("0")]),t._v(" 和 "),a("code",[t._v("-0")]),t._v(" 两个零。除了用零做除数以外，它们几乎没有任何区别，但是不建议这么做。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => -Infinity")]),t._v("\n")])])]),a("h5",{attrs:{id:"infinity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infinity"}},[t._v("#")]),t._v(" Infinity")]),t._v(" "),a("p",[a("code",[t._v("Infinity")]),t._v(" 指的是大到无法表示的值，并不是数学上的 ∞ 。")]),t._v(" "),a("h5",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[t._v("#")]),t._v(" NaN")]),t._v(" "),a("p",[a("code",[t._v("NaN")]),t._v("（Not a Number）表示不是数值的数值。在算数运算中产生没有意义的结果或者转换数值失败时会返回 "),a("code",[t._v("NaN")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有意义，返回 NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有意义，返回 NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换失败，返回 NaN")]),t._v("\n")])])]),a("p",[t._v("需要注意的是，"),a("code",[t._v("NaN")]),t._v(" 不等于它自己。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n")])])]),a("h4",{attrs:{id:"属性-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-3"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Number.EPSILON")]),a("sup",[t._v("ES6")]),t._v(" 表示最小正数，即 "),a("code",[t._v("2 ** -52")]),t._v("。由于浮点数运算存在精度丢失，会与实际结果产生误差。不过，我们可以通过 "),a("code",[t._v("Number.EPSILON")]),t._v(" 为浮点数运算设置一个安全误差范围，如果运算结果在该范围内，则误差可以忽略不计。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("Number.MAX_SAFE_INTEGER")]),a("sup",[t._v("ES6")]),t._v(" 表示最大安全整数，即 "),a("code",[t._v("2 ** 53 - 1")]),t._v("、")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.MIN_SAFE_INTEGER")]),a("sup",[t._v("ES6")]),t._v(" 表示最小安全整数，即 "),a("code",[t._v("-(2 ** 53 - 1)")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.MAX_VALUE")]),t._v(" 表示最大数值，相当于 "),a("code",[t._v("1.79E+308")]),t._v("；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.MIN_VALUE")]),t._v(" 表示最接近于 0 的最小值，相当于 "),a("code",[t._v("5e-324")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.POSITIVE_INFINITY")]),t._v(" 表示太大而无法表示的正数，即 "),a("code",[t._v("Infinity")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.NEGATIVE_INFINITY")]),t._v(" 表示太大而无法表示的负数，即 "),a("code",[t._v("-Infinity")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Number.NaN")]),t._v(" 与 "),a("code",[t._v("NaN")]),t._v(" 相同。")])])]),t._v(" "),a("h4",{attrs:{id:"方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-3"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Number.isSafeInteger(number)"),a("sup",[t._v("ES6")]),t._v(" 检查数值类型 number 是否是安全整数。")])]),t._v(" "),a("li",[a("p",[t._v("Number.isInteger(number)"),a("sup",[t._v("ES6")]),t._v(" 检查数值类型 number 是否是整数。")])]),t._v(" "),a("li",[a("p",[t._v("Number.isFinite(number)"),a("sup",[t._v("ES6")]),t._v(" 检查数值类型 number 是否是有穷数。")])]),t._v(" "),a("li",[a("p",[t._v("Number.isNaN(number)"),a("sup",[t._v("ES6")]),t._v(" 检查数值类型 number 是否是 "),a("code",[t._v("NaN")]),t._v("。")])])]),t._v(" "),a("p",[t._v("如果 number 是其他类型，以上方法都不会对 number 进行类型转换。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Number.parseInt(string, ?radix)"),a("sup",[t._v("ES6")]),t._v(" 用于将字符串解析为指定进制整数，这里的 radix 默认值并不是十进制，如果字符串开头包含 '0x' 或 '0X'，那么字符串会被当成十六进制解析。所以无论如何，我们都应该提供明确的 radix。")])]),t._v(" "),a("li",[a("p",[t._v("Number.parseFloat(string)"),a("sup",[t._v("ES6")]),t._v(" 用于将字符串解析为浮点数。")])])]),t._v(" "),a("p",[t._v("以上方法与全局方法 "),a("code",[t._v("parseInt()")]),t._v(" 和 "),a("code",[t._v("parseFloat()")]),t._v(" 的行为保持一致，只是出于减少全局命名空间污染目的，将其归纳到了 "),a("code",[t._v("Number")]),t._v(" 函数中。")]),t._v(" "),a("ul",[a("li",[t._v("toFixed(?fractionDigits)")])]),t._v(" "),a("p",[t._v("返回指定小数点位数表示的数值字符串。通过可选的 fractionDigits 指定保留多少位小数。")]),t._v(" "),a("ul",[a("li",[t._v("toExponential(?fractionDigits)")])]),t._v(" "),a("p",[t._v("返回以科学计数表示法表示的数值字符串。通过可选的 fractionDigits 指定小数的位数。")]),t._v(" "),a("ul",[a("li",[t._v("toPrecision(?precision)")])]),t._v(" "),a("p",[t._v("返回指定位数表示的数值字符串。通过可选的 precision 指定数值位数。")]),t._v(" "),a("ul",[a("li",[t._v("toString(?radix)")])]),t._v(" "),a("p",[t._v("返回数值的字符串表示。通过可选的 radix 将数值转换为指定基数，radix 在 2 ~ 36 之间，默认值为 10。")]),t._v(" "),a("h3",{attrs:{id:"bigint-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint-类型"}},[t._v("#")]),t._v(" BigInt 类型")]),t._v(" "),a("p",[t._v("BigInt 是 ES2020 提供的一种新的基本数据类型，用于表示大于 2 ** 53 的整数。Number 类型在超出安全整数范围内的算数运算并不精确。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2020 以前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 9007199254740992")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2020")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("53n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 9007199254740993n")]),t._v("\n")])])]),a("h4",{attrs:{id:"创建-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-3"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),a("p",[t._v("我们可以通过字面量（在整数末尾添加一个 "),a("code",[t._v("n")]),t._v("）或者调用 "),a("code",[t._v("BigInt")]),t._v(" 构造函数来创建 BigInt 类型的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740991n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740991")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作"}},[t._v("#")]),t._v(" 操作")]),t._v(" "),a("p",[t._v("与 Number 类型类似，BigInt 也可以使用算数运算符操作 BigInt 类型的值。不过需要注意的是除法运算会丢弃小数部分向下取整，为了兼容 asm.js，不能使用一元加操作符。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => TypeError")]),t._v("\n")])])]),a("p",[t._v("由于 Number 和 BigInt 之间强制类型转换会导致精度丢失，建议仅在预期大于 2 ** 53 的整数时才使用 BigInt。")]),t._v(" "),a("h3",{attrs:{id:"object-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型"}},[t._v("#")]),t._v(" Object 类型")]),t._v(" "),a("p",[t._v("Object 类型用于表示复杂的数据，关于对象的更多内容将在"),a("RouterLink",{attrs:{to:"/front/javascript/object-oriented-programing.html#对象"}},[t._v("面向对象编程")]),t._v("中讲到。")],1),t._v(" "),a("h3",{attrs:{id:"类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检测"}},[t._v("#")]),t._v(" 类型检测")]),t._v(" "),a("h4",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[t._v("我们可以通过 typeof 操作符来检测值的类型，它返回的是表示值类型的字符串。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",[t._v("返回结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Undefined")]),t._v(" "),a("td",[t._v("'undefined'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),a("td",[t._v("'object'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",[t._v("'boolean'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("td",[t._v("'string'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Symbol")]),t._v(" "),a("td",[t._v("'symbol'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",[t._v("'number'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("BigInt")]),t._v(" "),a("td",[t._v("'bigInt'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Function")]),t._v(" "),a("td",[t._v("'function'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Object")]),t._v(" "),a("td",[t._v("'object'")])])])]),t._v(" "),a("p",[t._v("值得注意的是，在某些情况的返回结果可能会让我们产生困惑。例如，")]),t._v(" "),a("ol",[a("li",[t._v("为什么 "),a("code",[t._v("typeof null")]),t._v(" 返回 "),a("code",[t._v("'object'")]),t._v(" 而不是 "),a("code",[t._v("'null'")]),t._v("？")])]),t._v(" "),a("p",[t._v("从结果来看，这是一个 bug；从最初设计角度来看，为了与 Java 保持一致，null 表示为“没有对象”的对象，所以 null 被建模成对象的一个特殊值；从最初的实现角度看，这是 “抽象泄露” 的结果，JavaScript 中的值由一个类型标记和实际值构成，null 值与对象值使用了相同的类型标记。所以返回 "),a("code",[t._v("'object'")]),t._v("。")]),t._v(" "),a("p",[t._v("我们可以通过特殊处理来检测 null 的类型：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("为什么 "),a("code",[t._v("typeof function() {}")]),t._v(" 返回 "),a("code",[t._v("'function'")]),t._v(" ？")])]),t._v(" "),a("p",[t._v("这是因为作为一等公民的函数有其特殊性，有必要将函数与对象区分开。")]),t._v(" "),a("h3",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("p",[t._v("我们将值从一种类型转换到另一种类型称为类型转换。JavaScript 中的类型转换包括显示强制类型转换和隐式强制类型转换两种。")]),t._v(" "),a("p",[t._v("使用转换函数和一些语义明显的操作符可以对值进行显示强制类型转换。而在一些操作符和语句中，JavaScript 通过一些转换规则，自动的将操作数和表达式的值隐式转换为特定类型。")]),t._v(" "),a("p",[t._v("隐式强制类型转换最初的目的是为了降低 JavaScript 作为简单脚本语言的入门门槛，但由于各种原因产生了错综复杂的转换规则，导致其成为混淆和错误的重要来源。不过取其精华去其糟粕，我们还是可以体验到强制类型转换带来的便利。")]),t._v(" "),a("h4",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" ToString")]),t._v(" "),a("p",[t._v("ToString 是其它类型的值转换为字符串的抽象规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Undefined")]),t._v(" "),a("td",[t._v("'undefined'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),a("td",[t._v("'null'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",[t._v("true => 'true'；false => 'false'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",[t._v("调用 Number.toString() 方法")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("BigInt")]),t._v(" "),a("td",[t._v("调用 BigInt.toString() 方法，后缀 n 会被去除")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Symbol")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Object")]),t._v(" "),a("td",[t._v("执行 ToPrimitive 操作（见后文）")])])])]),t._v(" "),a("p",[a("code",[t._v("String()")]),t._v(" 函数用于将非字符串显示强制类型转换为字符串。")]),t._v(" "),a("p",[t._v("二元 + 操作符在某些情况下会对操作数进行隐式强制类型转换。如果有一个操作数是字符串，则会把另一个操作数转换为字符串。通常使用 x + '' 将 x 转换为字符串。")]),t._v(" "),a("p",[t._v("以下是使用 "),a("code",[t._v("String()")]),t._v(" 函数进行显示强制类型转换与使用二元 + 操作符进行隐式强制类型转换为字符串的区别：")]),t._v(" "),a("p",[t._v("如果操作数是一个 Symbol 值，"),a("code",[t._v("String()")]),t._v(" 函数可以将其转换为字符串，而使用二元 + 操作符转换则会抛出 TypeError 异常。")]),t._v(" "),a("p",[t._v("如果操作数是一个对象，"),a("code",[t._v("String()")]),t._v(" 函数通过 ToString 规则直接返回转换结果，而使用二元 + 操作符会先调用 "),a("code",[t._v("valueOf()")]),t._v(" 方法，然后通过 ToString 规则将其结果转换为字符串。")]),t._v(" "),a("h4",{attrs:{id:"tonumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tonumber"}},[t._v("#")]),t._v(" ToNumber")]),t._v(" "),a("p",[t._v("ToNumber 是其它类型的值转换为数值的抽象规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Undefined")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",[t._v("true => 1；false => 0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("BigInt")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("td",[t._v("StringToNumber")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Symbol")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Object")]),t._v(" "),a("td",[t._v("执行 ToPrimitive 操作（见后文）")])])])]),t._v(" "),a("p",[t._v("StringToNumber 转换规则如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果是空字符串，返回 0；")])]),t._v(" "),a("li",[a("p",[t._v("如果字符串中是一个合法的 Number 类型的值，返回十进制数值，否则返回 NaN。")])])]),t._v(" "),a("p",[a("code",[t._v("Number()")]),t._v(" 函数用于非数值显示强制类型转换为数值。")]),t._v(" "),a("p",[t._v("一元 + 操作符也用于将操作数显示强制类型转换为数值。")]),t._v(" "),a("h4",{attrs:{id:"tobigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tobigint"}},[t._v("#")]),t._v(" ToBigInt")]),t._v(" "),a("p",[t._v("ToBigInt 是其它类型的值转换为大整数的抽象规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Undefined")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),a("td",[t._v("true => 1n；false => 0n")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",[t._v("integer => integer + 后缀 n；非 integer，抛出 "),a("strong",[t._v("RangeError")]),t._v(" 异常；非法数值抛出 "),a("strong",[t._v("SyntaxError")]),t._v(" 异常")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),a("td",[t._v("StringToBigInt")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Symbol")]),t._v(" "),a("td",[t._v("抛出 "),a("strong",[t._v("TypeError")]),t._v(" 异常")])])])]),t._v(" "),a("p",[t._v("StringToBigInt 转换规则如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果是空字符串，返回 0n；")])]),t._v(" "),a("li",[a("p",[t._v("如果字符串中是一个合法的整数值，则返回带有后缀 n 的整数值，否则抛出 "),a("strong",[t._v("SyntaxError")]),t._v(" 异常")])])]),t._v(" "),a("p",[a("code",[t._v("BigInt()")]),t._v(" 函数用于将布尔值、字符串和数值转换大整数。")]),t._v(" "),a("h4",{attrs:{id:"toboolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toboolean"}},[t._v("#")]),t._v(" ToBoolean")]),t._v(" "),a("p",[t._v("ToBoolean 是将其他类型的值转换为布尔值的抽象规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Undefined")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("Null")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("String")]),t._v(" "),a("td",[t._v("空字符串 => false，其它 => true")])]),t._v(" "),a("tr",[a("td",[t._v("Symbol")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("0、NaN => false，其它 => true")])]),t._v(" "),a("tr",[a("td",[t._v("BigInt")]),t._v(" "),a("td",[t._v("0n => false，其它 => true")])]),t._v(" "),a("tr",[a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("true")])])])]),t._v(" "),a("p",[t._v("JavaScript 在一些需要布尔值的地方可以接受任何值作为操作数，而这些值会被隐式转换为布尔值。")]),t._v(" "),a("p",[t._v("转换为 "),a("code",[t._v("false")]),t._v(" 的值称为"),a("strong",[t._v("假值")]),t._v("（falsy），包括：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("false")]),t._v("；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("undefined")]),t._v("；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("null")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("空字符串；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("0")]),t._v("、"),a("code",[t._v("-0")]),t._v("、"),a("code",[t._v("0n")]),t._v(" 和 "),a("code",[t._v("NaN")]),t._v("。")])])]),t._v(" "),a("p",[t._v("转换为 "),a("code",[t._v("true")]),t._v(" 的值称为"),a("strong",[t._v("真值")]),t._v("（truthy）。需要注意的是，"),a("code",[t._v("{}")]),t._v("、"),a("code",[t._v("[]")]),t._v("、"),a("code",[t._v("'false'")]),t._v(" 和 "),a("code",[t._v("'0'")]),t._v(" 等值看起来像假值，其实都是真值。")]),t._v(" "),a("p",[a("code",[t._v("Boolean()")]),t._v(" 函数用于将非布尔值显示强制类型转换为布尔值。")]),t._v(" "),a("p",[t._v("两个 !! 操作符也用于将操作数强制类型转换为布尔值。")]),t._v(" "),a("p",[t._v("需要注意的是，下面的操作符、表达式和语句会将其它类型的值隐式强制类型转换为布尔值：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("逻辑操作符 "),a("code",[t._v("!")]),t._v(" 、"),a("code",[t._v("||")]),t._v(" 和 "),a("code",[t._v("&&")]),t._v(" 的操作数；")])]),t._v(" "),a("li",[a("p",[t._v("三元表达式（"),a("code",[t._v("? :")]),t._v("）的第一个操作数；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("if")]),t._v(" 语句中的条件判断表达式；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("while")]),t._v("、"),a("code",[t._v("do-while")]),t._v(" 和 "),a("code",[t._v("for")]),t._v(" 语句中的条件判断表达式。")])])]),t._v(" "),a("h4",{attrs:{id:"toobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toobject"}},[t._v("#")]),t._v(" ToObject")]),t._v(" "),a("p",[t._v("ToObject 表示原始值转换成对象，即装箱转换。我们通过构造函数来创建封装了布尔值、数值和字符串的包装对象。但是一般情况下，我们不需要直接使用这些对象，因为封装对象的行为令人困惑。")]),t._v(" "),a("p",[t._v("我们在对原始值进行操作时，JavaScript 会隐式创建一个相应的包装对象，从而使用封装对象的属性和方法。使用完成之后会被立即销毁，所以给原始值创建属性并赋值后会立即不能访问。")]),t._v(" "),a("p",[t._v("因为原始值 "),a("code",[t._v("undefined")]),t._v(" 和 "),a("code",[t._v("null")]),t._v(" 没有对应的包装对象，所以操作这两个原始值是会抛出 TypeError 异常。")]),t._v(" "),a("p",[t._v("从 ES6 开始，新增的原始类型 "),a("code",[t._v("Symbol")]),t._v(" 和 "),a("code",[t._v("BigInt")]),t._v(" 不再支持显示的创建包装对象，如果想把这些类型转换成对象，可以使用 "),a("code",[t._v("Object()")]),t._v(" 函数进行包装。")]),t._v(" "),a("h4",{attrs:{id:"toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive"}},[t._v("#")]),t._v(" ToPrimitive")]),t._v(" "),a("p",[t._v("ToPrimitive 表示对象转换为原始值，即拆箱转换。其规则如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果该值有 "),a("code",[t._v("valueOf()")]),t._v(" 方法，并且返回原始值，则使用该值进行强制类型转换；")])]),t._v(" "),a("li",[a("p",[t._v("如果没有 "),a("code",[t._v("valueOf()")]),t._v(" 方法，或者存在但返回的不是原始值，则使用 "),a("code",[t._v("toString()")]),t._v(" 方法的返回值进行强制类型转换；")])]),t._v(" "),a("li",[a("p",[t._v("如果没有 "),a("code",[t._v("toString()")]),t._v(" 方法则抛出 TypeError 异常。")])])]),t._v(" "),a("p",[t._v("虽然绝大多数对象转换为原始值都遵循 ToPrimitive 规则，但是 Date 对象比较独特，则是首先尝试调用 "),a("code",[t._v("toString()")]),t._v(" 方法，再尝试 "),a("code",[t._v("valueOf()")]),t._v(" 方法。")]),t._v(" "),a("h4",{attrs:{id:"抽象相等比较算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象相等比较算法"}},[t._v("#")]),t._v(" 抽象相等比较算法")]),t._v(" "),a("p",[t._v("只有在 "),a("code",[t._v("==")]),t._v(" 操作符两边的操作数类型不同时，才会使用该算法，其规则简单概括如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果一个操作数是 "),a("code",[t._v("null")]),t._v("，另一个操作数是 "),a("code",[t._v("undefined")]),t._v("，则相等。除此之外，它们与其它值不相等；")])]),t._v(" "),a("li",[a("p",[t._v("如果任意一个操作数是布尔值，则将其转换为数值再比较；")])]),t._v(" "),a("li",[a("p",[t._v("如果一个操作数是字符串，另一个操作数是数值，则先调用 ToNumber 把字符串转换为数值再比较；")])]),t._v(" "),a("li",[a("p",[t._v("如果一个操作数是字符串，另一个操作数是 BigInt，则先调用 StringToBigInt 把字符串转换为大整数再比较；")])]),t._v(" "),a("li",[a("p",[t._v("如果一个操作数是 Object，另一个操作数是字符串、数值或大整数，则先调用 ToPrimitive 把对象转换为原始值再比较。")])])]),t._v(" "),a("p",[t._v("详细规则请前往"),a("a",{attrs:{href:"https://262.ecma-international.org/13.0/#sec-islooselyequal",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方标准"),a("OutboundLink")],1),t._v("查看。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[t._v("wikipedia")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-JavaScript"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://262.ecma-international.org/13.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 标准"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/tc39/proposals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript proposals"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("《你不知道的 JavaScript》中卷")]),t._v(" "),a("li",[t._v("《JavaScript 高级程序设计》（第 4 版）")]),t._v(" "),a("li",[t._v("《JavaScript 权威指南》（原书第 7 版）")]),t._v(" "),a("li",[t._v("《JavaScript 悟道》")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://exploringjs.com/impatient-js/toc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JavaScript for impatient programmers (ES1–ES2022) 》"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("《Effective JavaScript——编写高质量 JavaScript 代码的 68 个有效方法》")]),t._v(" "),a("li",[t._v("《JavaScript 编程精解》（原书第 3 版）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/doodlewind/jshistory-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JavaScript 二十年》"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/article/78884",target:"_blank",rel:"noopener noreferrer"}},[t._v("重学前端"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);